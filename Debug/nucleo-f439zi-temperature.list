
nucleo-f439zi-temperature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005444  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080055f4  080055f4  000155f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005654  08005654  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005654  08005654  00015654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800565c  0800565c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800565c  0800565c  0001565c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005660  08005660  00015660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000934  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000990  20000990  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f557  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001f48  00000000  00000000  0002f626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c48  00000000  00000000  00031570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000097b  00000000  00000000  000321b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025f77  00000000  00000000  00032b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e727  00000000  00000000  00058aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e9d1d  00000000  00000000  000671d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003bd4  00000000  00000000  00150ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  00154ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080055dc 	.word	0x080055dc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	080055dc 	.word	0x080055dc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	0000      	movs	r0, r0
	...

08000eb8 <readThermistor.0>:




  double readThermistor()
  {
 8000eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eba:	b08f      	sub	sp, #60	; 0x3c
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	f8c7 c004 	str.w	ip, [r7, #4]
 8000ec2:	466b      	mov	r3, sp
 8000ec4:	461e      	mov	r6, r3
    double rThermistor = 0;            // Holds thermistor resistance value
 8000ec6:	f04f 0200 	mov.w	r2, #0
 8000eca:	f04f 0300 	mov.w	r3, #0
 8000ece:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double tKelvin     = 0;            // Holds calculated temperature
 8000ed2:	f04f 0200 	mov.w	r2, #0
 8000ed6:	f04f 0300 	mov.w	r3, #0
 8000eda:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double tCelsius    = 0;            // Hold temperature in celsius
 8000ede:	f04f 0200 	mov.w	r2, #0
 8000ee2:	f04f 0300 	mov.w	r3, #0
 8000ee6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double adcAverage  = 0;            // Holds the average voltage measurement
 8000eea:	f04f 0200 	mov.w	r2, #0
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int    adcSamples[SAMPLE_NUMBER];  // Array to hold each voltage measurement
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	2303      	movs	r3, #3
 8000efe:	461a      	mov	r2, r3
 8000f00:	2300      	movs	r3, #0
 8000f02:	4614      	mov	r4, r2
 8000f04:	461d      	mov	r5, r3
 8000f06:	f04f 0200 	mov.w	r2, #0
 8000f0a:	f04f 0300 	mov.w	r3, #0
 8000f0e:	016b      	lsls	r3, r5, #5
 8000f10:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000f14:	0162      	lsls	r2, r4, #5
 8000f16:	2303      	movs	r3, #3
 8000f18:	461a      	mov	r2, r3
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f04f 0200 	mov.w	r2, #0
 8000f24:	f04f 0300 	mov.w	r3, #0
 8000f28:	014b      	lsls	r3, r1, #5
 8000f2a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000f2e:	0142      	lsls	r2, r0, #5
 8000f30:	2303      	movs	r3, #3
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	3307      	adds	r3, #7
 8000f36:	08db      	lsrs	r3, r3, #3
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	ebad 0d03 	sub.w	sp, sp, r3
 8000f3e:	466b      	mov	r3, sp
 8000f40:	3303      	adds	r3, #3
 8000f42:	089b      	lsrs	r3, r3, #2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	60bb      	str	r3, [r7, #8]
    /* Calculate thermistor's average resistance:
       As mentioned in the top of the code, we will sample the ADC pin a few times
       to get a bunch of samples. A slight delay is added to properly have the
       analogRead function sample properly */

    for (int i = 0; i < SAMPLE_NUMBER; i++)
 8000f48:	2300      	movs	r3, #0
 8000f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f4c:	e00e      	b.n	8000f6c <readThermistor.0+0xb4>
    {
      adcSamples[i] = HAL_ADC_GetValue(&hadc1);
 8000f4e:	485c      	ldr	r0, [pc, #368]	; (80010c0 <readThermistor.0+0x208>)
 8000f50:	f000 ffdd 	bl	8001f0e <HAL_ADC_GetValue>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4619      	mov	r1, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      HAL_Delay(10);        // wait 10 milliseconds
 8000f60:	200a      	movs	r0, #10
 8000f62:	f000 fe0f 	bl	8001b84 <HAL_Delay>
    for (int i = 0; i < SAMPLE_NUMBER; i++)
 8000f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f68:	3301      	adds	r3, #1
 8000f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f70:	4293      	cmp	r3, r2
 8000f72:	dbec      	blt.n	8000f4e <readThermistor.0+0x96>
    }

    /* Then, we will simply average all of those samples up for a "stiffer"
       measurement. */
    for (int i = 0; i < SAMPLE_NUMBER; i++)
 8000f74:	2300      	movs	r3, #0
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f78:	e013      	b.n	8000fa2 <readThermistor.0+0xea>
    {
      adcAverage += adcSamples[i];      // add all samples up . . .
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fade 	bl	8000544 <__aeabi_i2d>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000f90:	f7ff f98c 	bl	80002ac <__adddf3>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    for (int i = 0; i < SAMPLE_NUMBER; i++)
 8000f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	dbe7      	blt.n	8000f7a <readThermistor.0+0xc2>
    }
    adcAverage /= SAMPLE_NUMBER;        // . . . average it w/ divide
 8000faa:	2303      	movs	r3, #3
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fac9 	bl	8000544 <__aeabi_i2d>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000fba:	f7ff fc57 	bl	800086c <__aeabi_ddiv>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Here we calculate the thermistor’s resistance using the equation
       discussed in the article. */
    rThermistor = BALANCE_RESISTOR * ( (MAX_ADC / adcAverage) - 1);
 8000fc6:	a134      	add	r1, pc, #208	; (adr r1, 8001098 <readThermistor.0+0x1e0>)
 8000fc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000fcc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000fd0:	f7ff fc4c 	bl	800086c <__aeabi_ddiv>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4610      	mov	r0, r2
 8000fda:	4619      	mov	r1, r3
 8000fdc:	f04f 0200 	mov.w	r2, #0
 8000fe0:	4b38      	ldr	r3, [pc, #224]	; (80010c4 <readThermistor.0+0x20c>)
 8000fe2:	f7ff f961 	bl	80002a8 <__aeabi_dsub>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	a32c      	add	r3, pc, #176	; (adr r3, 80010a0 <readThermistor.0+0x1e8>)
 8000ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff4:	f7ff fb10 	bl	8000618 <__aeabi_dmul>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	e9c7 2308 	strd	r2, r3, [r7, #32]
       algebraically to give a "better" looking formula. I encourage you
       to try to manipulate the equation from the article yourself to get
       better at algebra. And if not, just use what is shown here and take it
       for granted or input the formula directly from the article, exactly
       as it is shown. Either way will work! */
    tKelvin = (BETA * ROOM_TEMP) /
 8001000:	a129      	add	r1, pc, #164	; (adr r1, 80010a8 <readThermistor.0+0x1f0>)
 8001002:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001006:	a32a      	add	r3, pc, #168	; (adr r3, 80010b0 <readThermistor.0+0x1f8>)
 8001008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100c:	f7ff fb04 	bl	8000618 <__aeabi_dmul>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	4614      	mov	r4, r2
 8001016:	461d      	mov	r5, r3
              (BETA + (ROOM_TEMP * log(rThermistor / RESISTOR_ROOM_TEMP)));
 8001018:	a321      	add	r3, pc, #132	; (adr r3, 80010a0 <readThermistor.0+0x1e8>)
 800101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001022:	f7ff fc23 	bl	800086c <__aeabi_ddiv>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	ec43 2b17 	vmov	d7, r2, r3
 800102e:	eeb0 0a47 	vmov.f32	s0, s14
 8001032:	eef0 0a67 	vmov.f32	s1, s15
 8001036:	f004 f8cf 	bl	80051d8 <log>
 800103a:	ec51 0b10 	vmov	r0, r1, d0
 800103e:	a31c      	add	r3, pc, #112	; (adr r3, 80010b0 <readThermistor.0+0x1f8>)
 8001040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001044:	f7ff fae8 	bl	8000618 <__aeabi_dmul>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	4610      	mov	r0, r2
 800104e:	4619      	mov	r1, r3
 8001050:	a315      	add	r3, pc, #84	; (adr r3, 80010a8 <readThermistor.0+0x1f0>)
 8001052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001056:	f7ff f929 	bl	80002ac <__adddf3>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
    tKelvin = (BETA * ROOM_TEMP) /
 800105e:	4620      	mov	r0, r4
 8001060:	4629      	mov	r1, r5
 8001062:	f7ff fc03 	bl	800086c <__aeabi_ddiv>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    /* I will use the units of Celsius to indicate temperature. I did this
       just so I can see the typical room temperature, which is 25 degrees
       Celsius, when I first try the program out. I prefer Fahrenheit, but
       I leave it up to you to either change this function, or create
       another function which converts between the two units. */
    tCelsius = tKelvin - 273.15;  // convert kelvin to celsius
 800106e:	a312      	add	r3, pc, #72	; (adr r3, 80010b8 <readThermistor.0+0x200>)
 8001070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001074:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001078:	f7ff f916 	bl	80002a8 <__aeabi_dsub>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	e9c7 2304 	strd	r2, r3, [r7, #16]

    return tCelsius;    // Return the temperature in Celsius
 8001084:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001088:	46b5      	mov	sp, r6
  }
 800108a:	4610      	mov	r0, r2
 800108c:	4619      	mov	r1, r3
 800108e:	373c      	adds	r7, #60	; 0x3c
 8001090:	46bd      	mov	sp, r7
 8001092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001094:	f3af 8000 	nop.w
 8001098:	00000000 	.word	0x00000000
 800109c:	408ff800 	.word	0x408ff800
 80010a0:	00000000 	.word	0x00000000
 80010a4:	40c38800 	.word	0x40c38800
 80010a8:	00000000 	.word	0x00000000
 80010ac:	40af2000 	.word	0x40af2000
 80010b0:	66666666 	.word	0x66666666
 80010b4:	40716266 	.word	0x40716266
 80010b8:	66666666 	.word	0x66666666
 80010bc:	40711266 	.word	0x40711266
 80010c0:	200001f0 	.word	0x200001f0
 80010c4:	3ff00000 	.word	0x3ff00000

080010c8 <main>:
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
int main(void)
 80010ce:	f107 0310 	add.w	r3, r7, #16
 80010d2:	607b      	str	r3, [r7, #4]
  HAL_Init();
 80010d4:	f000 fce4 	bl	8001aa0 <HAL_Init>
  SystemClock_Config();
 80010d8:	f000 f846 	bl	8001168 <SystemClock_Config>
  MX_GPIO_Init();
 80010dc:	f000 f9a8 	bl	8001430 <MX_GPIO_Init>
  MX_ETH_Init();
 80010e0:	f000 f900 	bl	80012e4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80010e4:	f000 f94c 	bl	8001380 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80010e8:	f000 f974 	bl	80013d4 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80010ec:	f000 f8a6 	bl	800123c <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 80010f0:	4818      	ldr	r0, [pc, #96]	; (8001154 <main+0x8c>)
 80010f2:	f000 fdaf 	bl	8001c54 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,20);
 80010f6:	2114      	movs	r1, #20
 80010f8:	4816      	ldr	r0, [pc, #88]	; (8001154 <main+0x8c>)
 80010fa:	f000 fe7d 	bl	8001df8 <HAL_ADC_PollForConversion>
	  temp = HAL_ADC_GetValue(&hadc1);
 80010fe:	4815      	ldr	r0, [pc, #84]	; (8001154 <main+0x8c>)
 8001100:	f000 ff05 	bl	8001f0e <HAL_ADC_GetValue>
 8001104:	4603      	mov	r3, r0
 8001106:	b29a      	uxth	r2, r3
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <main+0x90>)
 800110a:	801a      	strh	r2, [r3, #0]
	  temp = readThermistor();
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	469c      	mov	ip, r3
 8001110:	f7ff fed2 	bl	8000eb8 <readThermistor.0>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4610      	mov	r0, r2
 800111a:	4619      	mov	r1, r3
 800111c:	f7ff fd2c 	bl	8000b78 <__aeabi_d2uiz>
 8001120:	4603      	mov	r3, r0
 8001122:	b29a      	uxth	r2, r3
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <main+0x90>)
 8001126:	801a      	strh	r2, [r3, #0]
	  sprintf(message, "Temperatur: %hu \r\n",temp);
 8001128:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <main+0x90>)
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	461a      	mov	r2, r3
 800112e:	490b      	ldr	r1, [pc, #44]	; (800115c <main+0x94>)
 8001130:	480b      	ldr	r0, [pc, #44]	; (8001160 <main+0x98>)
 8001132:	f003 fbad 	bl	8004890 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8001136:	480a      	ldr	r0, [pc, #40]	; (8001160 <main+0x98>)
 8001138:	f7ff f85a 	bl	80001f0 <strlen>
 800113c:	4603      	mov	r3, r0
 800113e:	b29a      	uxth	r2, r3
 8001140:	f04f 33ff 	mov.w	r3, #4294967295
 8001144:	4906      	ldr	r1, [pc, #24]	; (8001160 <main+0x98>)
 8001146:	4807      	ldr	r0, [pc, #28]	; (8001164 <main+0x9c>)
 8001148:	f002 fce6 	bl	8003b18 <HAL_UART_Transmit>
	  HAL_Delay(200);
 800114c:	20c8      	movs	r0, #200	; 0xc8
 800114e:	f000 fd19 	bl	8001b84 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8001152:	e7cd      	b.n	80010f0 <main+0x28>
 8001154:	200001f0 	.word	0x200001f0
 8001158:	20000814 	.word	0x20000814
 800115c:	080055f4 	.word	0x080055f4
 8001160:	20000818 	.word	0x20000818
 8001164:	200002e8 	.word	0x200002e8

08001168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b094      	sub	sp, #80	; 0x50
 800116c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116e:	f107 0320 	add.w	r3, r7, #32
 8001172:	2230      	movs	r2, #48	; 0x30
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f003 fbaa 	bl	80048d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	4b28      	ldr	r3, [pc, #160]	; (8001234 <SystemClock_Config+0xcc>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	4a27      	ldr	r2, [pc, #156]	; (8001234 <SystemClock_Config+0xcc>)
 8001196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800119a:	6413      	str	r3, [r2, #64]	; 0x40
 800119c:	4b25      	ldr	r3, [pc, #148]	; (8001234 <SystemClock_Config+0xcc>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a8:	2300      	movs	r3, #0
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	4b22      	ldr	r3, [pc, #136]	; (8001238 <SystemClock_Config+0xd0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a21      	ldr	r2, [pc, #132]	; (8001238 <SystemClock_Config+0xd0>)
 80011b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <SystemClock_Config+0xd0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011c4:	2301      	movs	r3, #1
 80011c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ce:	2302      	movs	r3, #2
 80011d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011d8:	2304      	movs	r3, #4
 80011da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011dc:	23a8      	movs	r3, #168	; 0xa8
 80011de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011e4:	2307      	movs	r3, #7
 80011e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e8:	f107 0320 	add.w	r3, r7, #32
 80011ec:	4618      	mov	r0, r3
 80011ee:	f001 ffab 	bl	8003148 <HAL_RCC_OscConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011f8:	f000 f9dc 	bl	80015b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fc:	230f      	movs	r3, #15
 80011fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001200:	2302      	movs	r3, #2
 8001202:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001208:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800120c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800120e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001212:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	2105      	movs	r1, #5
 800121a:	4618      	mov	r0, r3
 800121c:	f002 fa0c 	bl	8003638 <HAL_RCC_ClockConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001226:	f000 f9c5 	bl	80015b4 <Error_Handler>
  }
}
 800122a:	bf00      	nop
 800122c:	3750      	adds	r7, #80	; 0x50
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800
 8001238:	40007000 	.word	0x40007000

0800123c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001242:	463b      	mov	r3, r7
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800124e:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <MX_ADC1_Init+0x9c>)
 8001250:	4a22      	ldr	r2, [pc, #136]	; (80012dc <MX_ADC1_Init+0xa0>)
 8001252:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001254:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <MX_ADC1_Init+0x9c>)
 8001256:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800125a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800125c:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <MX_ADC1_Init+0x9c>)
 800125e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001262:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001264:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <MX_ADC1_Init+0x9c>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800126a:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <MX_ADC1_Init+0x9c>)
 800126c:	2200      	movs	r2, #0
 800126e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001270:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <MX_ADC1_Init+0x9c>)
 8001272:	2200      	movs	r2, #0
 8001274:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001278:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <MX_ADC1_Init+0x9c>)
 800127a:	2200      	movs	r2, #0
 800127c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800127e:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <MX_ADC1_Init+0x9c>)
 8001280:	4a17      	ldr	r2, [pc, #92]	; (80012e0 <MX_ADC1_Init+0xa4>)
 8001282:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001284:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <MX_ADC1_Init+0x9c>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <MX_ADC1_Init+0x9c>)
 800128c:	2201      	movs	r2, #1
 800128e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <MX_ADC1_Init+0x9c>)
 8001292:	2200      	movs	r2, #0
 8001294:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <MX_ADC1_Init+0x9c>)
 800129a:	2201      	movs	r2, #1
 800129c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800129e:	480e      	ldr	r0, [pc, #56]	; (80012d8 <MX_ADC1_Init+0x9c>)
 80012a0:	f000 fc94 	bl	8001bcc <HAL_ADC_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80012aa:	f000 f983 	bl	80015b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012b2:	2301      	movs	r3, #1
 80012b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80012b6:	2301      	movs	r3, #1
 80012b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ba:	463b      	mov	r3, r7
 80012bc:	4619      	mov	r1, r3
 80012be:	4806      	ldr	r0, [pc, #24]	; (80012d8 <MX_ADC1_Init+0x9c>)
 80012c0:	f000 fe32 	bl	8001f28 <HAL_ADC_ConfigChannel>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80012ca:	f000 f973 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200001f0 	.word	0x200001f0
 80012dc:	40012000 	.word	0x40012000
 80012e0:	0f000001 	.word	0x0f000001

080012e4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <MX_ETH_Init+0x84>)
 80012ea:	4a20      	ldr	r2, [pc, #128]	; (800136c <MX_ETH_Init+0x88>)
 80012ec:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80012ee:	4b20      	ldr	r3, [pc, #128]	; (8001370 <MX_ETH_Init+0x8c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80012f4:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <MX_ETH_Init+0x8c>)
 80012f6:	2280      	movs	r2, #128	; 0x80
 80012f8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80012fa:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <MX_ETH_Init+0x8c>)
 80012fc:	22e1      	movs	r2, #225	; 0xe1
 80012fe:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <MX_ETH_Init+0x8c>)
 8001302:	2200      	movs	r2, #0
 8001304:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001306:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <MX_ETH_Init+0x8c>)
 8001308:	2200      	movs	r2, #0
 800130a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800130c:	4b18      	ldr	r3, [pc, #96]	; (8001370 <MX_ETH_Init+0x8c>)
 800130e:	2200      	movs	r2, #0
 8001310:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <MX_ETH_Init+0x84>)
 8001314:	4a16      	ldr	r2, [pc, #88]	; (8001370 <MX_ETH_Init+0x8c>)
 8001316:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <MX_ETH_Init+0x84>)
 800131a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800131e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <MX_ETH_Init+0x84>)
 8001322:	4a14      	ldr	r2, [pc, #80]	; (8001374 <MX_ETH_Init+0x90>)
 8001324:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <MX_ETH_Init+0x84>)
 8001328:	4a13      	ldr	r2, [pc, #76]	; (8001378 <MX_ETH_Init+0x94>)
 800132a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800132c:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <MX_ETH_Init+0x84>)
 800132e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001332:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001334:	480c      	ldr	r0, [pc, #48]	; (8001368 <MX_ETH_Init+0x84>)
 8001336:	f001 f90b 	bl	8002550 <HAL_ETH_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001340:	f000 f938 	bl	80015b4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001344:	2238      	movs	r2, #56	; 0x38
 8001346:	2100      	movs	r1, #0
 8001348:	480c      	ldr	r0, [pc, #48]	; (800137c <MX_ETH_Init+0x98>)
 800134a:	f003 fac1 	bl	80048d0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800134e:	4b0b      	ldr	r3, [pc, #44]	; (800137c <MX_ETH_Init+0x98>)
 8001350:	2221      	movs	r2, #33	; 0x21
 8001352:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <MX_ETH_Init+0x98>)
 8001356:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800135a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <MX_ETH_Init+0x98>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000238 	.word	0x20000238
 800136c:	40028000 	.word	0x40028000
 8001370:	20000838 	.word	0x20000838
 8001374:	20000150 	.word	0x20000150
 8001378:	200000b0 	.word	0x200000b0
 800137c:	20000078 	.word	0x20000078

08001380 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_USART3_UART_Init+0x4c>)
 8001386:	4a12      	ldr	r2, [pc, #72]	; (80013d0 <MX_USART3_UART_Init+0x50>)
 8001388:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <MX_USART3_UART_Init+0x4c>)
 800138c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001390:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_USART3_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_USART3_UART_Init+0x4c>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <MX_USART3_UART_Init+0x4c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_USART3_UART_Init+0x4c>)
 80013a6:	220c      	movs	r2, #12
 80013a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <MX_USART3_UART_Init+0x4c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_USART3_UART_Init+0x4c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_USART3_UART_Init+0x4c>)
 80013b8:	f002 fb5e 	bl	8003a78 <HAL_UART_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80013c2:	f000 f8f7 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200002e8 	.word	0x200002e8
 80013d0:	40004800 	.word	0x40004800

080013d4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80013de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013e2:	2204      	movs	r2, #4
 80013e4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013e8:	2202      	movs	r2, #2
 80013ea:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80013ec:	4b0f      	ldr	r3, [pc, #60]	; (800142c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013f4:	2202      	movs	r2, #2
 80013f6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001400:	2200      	movs	r2, #0
 8001402:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001406:	2200      	movs	r2, #0
 8001408:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800140a:	4b08      	ldr	r3, [pc, #32]	; (800142c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800140c:	2201      	movs	r2, #1
 800140e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001412:	2200      	movs	r2, #0
 8001414:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001418:	f001 fd87 	bl	8002f2a <HAL_PCD_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001422:	f000 f8c7 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000330 	.word	0x20000330

08001430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08c      	sub	sp, #48	; 0x30
 8001434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
 800144a:	4b55      	ldr	r3, [pc, #340]	; (80015a0 <MX_GPIO_Init+0x170>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a54      	ldr	r2, [pc, #336]	; (80015a0 <MX_GPIO_Init+0x170>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b52      	ldr	r3, [pc, #328]	; (80015a0 <MX_GPIO_Init+0x170>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	61bb      	str	r3, [r7, #24]
 8001460:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	4b4e      	ldr	r3, [pc, #312]	; (80015a0 <MX_GPIO_Init+0x170>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a4d      	ldr	r2, [pc, #308]	; (80015a0 <MX_GPIO_Init+0x170>)
 800146c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b4b      	ldr	r3, [pc, #300]	; (80015a0 <MX_GPIO_Init+0x170>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	4b47      	ldr	r3, [pc, #284]	; (80015a0 <MX_GPIO_Init+0x170>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a46      	ldr	r2, [pc, #280]	; (80015a0 <MX_GPIO_Init+0x170>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b44      	ldr	r3, [pc, #272]	; (80015a0 <MX_GPIO_Init+0x170>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b40      	ldr	r3, [pc, #256]	; (80015a0 <MX_GPIO_Init+0x170>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a3f      	ldr	r2, [pc, #252]	; (80015a0 <MX_GPIO_Init+0x170>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b3d      	ldr	r3, [pc, #244]	; (80015a0 <MX_GPIO_Init+0x170>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	4b39      	ldr	r3, [pc, #228]	; (80015a0 <MX_GPIO_Init+0x170>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a38      	ldr	r2, [pc, #224]	; (80015a0 <MX_GPIO_Init+0x170>)
 80014c0:	f043 0308 	orr.w	r3, r3, #8
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b36      	ldr	r3, [pc, #216]	; (80015a0 <MX_GPIO_Init+0x170>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	4b32      	ldr	r3, [pc, #200]	; (80015a0 <MX_GPIO_Init+0x170>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a31      	ldr	r2, [pc, #196]	; (80015a0 <MX_GPIO_Init+0x170>)
 80014dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b2f      	ldr	r3, [pc, #188]	; (80015a0 <MX_GPIO_Init+0x170>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2120      	movs	r1, #32
 80014f2:	482c      	ldr	r0, [pc, #176]	; (80015a4 <MX_GPIO_Init+0x174>)
 80014f4:	f001 fd00 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80014f8:	2200      	movs	r2, #0
 80014fa:	f244 0181 	movw	r1, #16513	; 0x4081
 80014fe:	482a      	ldr	r0, [pc, #168]	; (80015a8 <MX_GPIO_Init+0x178>)
 8001500:	f001 fcfa 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	2140      	movs	r1, #64	; 0x40
 8001508:	4828      	ldr	r0, [pc, #160]	; (80015ac <MX_GPIO_Init+0x17c>)
 800150a:	f001 fcf5 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800150e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001512:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001514:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001518:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800151e:	f107 031c 	add.w	r3, r7, #28
 8001522:	4619      	mov	r1, r3
 8001524:	4822      	ldr	r0, [pc, #136]	; (80015b0 <MX_GPIO_Init+0x180>)
 8001526:	f001 fb3b 	bl	8002ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800152a:	2320      	movs	r3, #32
 800152c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152e:	2301      	movs	r3, #1
 8001530:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001536:	2300      	movs	r3, #0
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	f107 031c 	add.w	r3, r7, #28
 800153e:	4619      	mov	r1, r3
 8001540:	4818      	ldr	r0, [pc, #96]	; (80015a4 <MX_GPIO_Init+0x174>)
 8001542:	f001 fb2d 	bl	8002ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001546:	f244 0381 	movw	r3, #16513	; 0x4081
 800154a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154c:	2301      	movs	r3, #1
 800154e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	4619      	mov	r1, r3
 800155e:	4812      	ldr	r0, [pc, #72]	; (80015a8 <MX_GPIO_Init+0x178>)
 8001560:	f001 fb1e 	bl	8002ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001564:	2340      	movs	r3, #64	; 0x40
 8001566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001568:	2301      	movs	r3, #1
 800156a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	4619      	mov	r1, r3
 800157a:	480c      	ldr	r0, [pc, #48]	; (80015ac <MX_GPIO_Init+0x17c>)
 800157c:	f001 fb10 	bl	8002ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001584:	2300      	movs	r3, #0
 8001586:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800158c:	f107 031c 	add.w	r3, r7, #28
 8001590:	4619      	mov	r1, r3
 8001592:	4806      	ldr	r0, [pc, #24]	; (80015ac <MX_GPIO_Init+0x17c>)
 8001594:	f001 fb04 	bl	8002ba0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001598:	bf00      	nop
 800159a:	3730      	adds	r7, #48	; 0x30
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020000 	.word	0x40020000
 80015a8:	40020400 	.word	0x40020400
 80015ac:	40021800 	.word	0x40021800
 80015b0:	40020800 	.word	0x40020800

080015b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b8:	b672      	cpsid	i
}
 80015ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015bc:	e7fe      	b.n	80015bc <Error_Handler+0x8>
	...

080015c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <HAL_MspInit+0x4c>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	4a0f      	ldr	r2, [pc, #60]	; (800160c <HAL_MspInit+0x4c>)
 80015d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d4:	6453      	str	r3, [r2, #68]	; 0x44
 80015d6:	4b0d      	ldr	r3, [pc, #52]	; (800160c <HAL_MspInit+0x4c>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	603b      	str	r3, [r7, #0]
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <HAL_MspInit+0x4c>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	4a08      	ldr	r2, [pc, #32]	; (800160c <HAL_MspInit+0x4c>)
 80015ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f0:	6413      	str	r3, [r2, #64]	; 0x40
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_MspInit+0x4c>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800

08001610 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	; 0x28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a17      	ldr	r2, [pc, #92]	; (800168c <HAL_ADC_MspInit+0x7c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d127      	bne.n	8001682 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	4b16      	ldr	r3, [pc, #88]	; (8001690 <HAL_ADC_MspInit+0x80>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	4a15      	ldr	r2, [pc, #84]	; (8001690 <HAL_ADC_MspInit+0x80>)
 800163c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001640:	6453      	str	r3, [r2, #68]	; 0x44
 8001642:	4b13      	ldr	r3, [pc, #76]	; (8001690 <HAL_ADC_MspInit+0x80>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <HAL_ADC_MspInit+0x80>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a0e      	ldr	r2, [pc, #56]	; (8001690 <HAL_ADC_MspInit+0x80>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <HAL_ADC_MspInit+0x80>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800166a:	2301      	movs	r3, #1
 800166c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800166e:	2303      	movs	r3, #3
 8001670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4619      	mov	r1, r3
 800167c:	4805      	ldr	r0, [pc, #20]	; (8001694 <HAL_ADC_MspInit+0x84>)
 800167e:	f001 fa8f 	bl	8002ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001682:	bf00      	nop
 8001684:	3728      	adds	r7, #40	; 0x28
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40012000 	.word	0x40012000
 8001690:	40023800 	.word	0x40023800
 8001694:	40020000 	.word	0x40020000

08001698 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08e      	sub	sp, #56	; 0x38
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a55      	ldr	r2, [pc, #340]	; (800180c <HAL_ETH_MspInit+0x174>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	f040 80a4 	bne.w	8001804 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80016bc:	2300      	movs	r3, #0
 80016be:	623b      	str	r3, [r7, #32]
 80016c0:	4b53      	ldr	r3, [pc, #332]	; (8001810 <HAL_ETH_MspInit+0x178>)
 80016c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c4:	4a52      	ldr	r2, [pc, #328]	; (8001810 <HAL_ETH_MspInit+0x178>)
 80016c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016ca:	6313      	str	r3, [r2, #48]	; 0x30
 80016cc:	4b50      	ldr	r3, [pc, #320]	; (8001810 <HAL_ETH_MspInit+0x178>)
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d4:	623b      	str	r3, [r7, #32]
 80016d6:	6a3b      	ldr	r3, [r7, #32]
 80016d8:	2300      	movs	r3, #0
 80016da:	61fb      	str	r3, [r7, #28]
 80016dc:	4b4c      	ldr	r3, [pc, #304]	; (8001810 <HAL_ETH_MspInit+0x178>)
 80016de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e0:	4a4b      	ldr	r2, [pc, #300]	; (8001810 <HAL_ETH_MspInit+0x178>)
 80016e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016e6:	6313      	str	r3, [r2, #48]	; 0x30
 80016e8:	4b49      	ldr	r3, [pc, #292]	; (8001810 <HAL_ETH_MspInit+0x178>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016f0:	61fb      	str	r3, [r7, #28]
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	2300      	movs	r3, #0
 80016f6:	61bb      	str	r3, [r7, #24]
 80016f8:	4b45      	ldr	r3, [pc, #276]	; (8001810 <HAL_ETH_MspInit+0x178>)
 80016fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fc:	4a44      	ldr	r2, [pc, #272]	; (8001810 <HAL_ETH_MspInit+0x178>)
 80016fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001702:	6313      	str	r3, [r2, #48]	; 0x30
 8001704:	4b42      	ldr	r3, [pc, #264]	; (8001810 <HAL_ETH_MspInit+0x178>)
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800170c:	61bb      	str	r3, [r7, #24]
 800170e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	4b3e      	ldr	r3, [pc, #248]	; (8001810 <HAL_ETH_MspInit+0x178>)
 8001716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001718:	4a3d      	ldr	r2, [pc, #244]	; (8001810 <HAL_ETH_MspInit+0x178>)
 800171a:	f043 0304 	orr.w	r3, r3, #4
 800171e:	6313      	str	r3, [r2, #48]	; 0x30
 8001720:	4b3b      	ldr	r3, [pc, #236]	; (8001810 <HAL_ETH_MspInit+0x178>)
 8001722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172c:	2300      	movs	r3, #0
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	4b37      	ldr	r3, [pc, #220]	; (8001810 <HAL_ETH_MspInit+0x178>)
 8001732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001734:	4a36      	ldr	r2, [pc, #216]	; (8001810 <HAL_ETH_MspInit+0x178>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6313      	str	r3, [r2, #48]	; 0x30
 800173c:	4b34      	ldr	r3, [pc, #208]	; (8001810 <HAL_ETH_MspInit+0x178>)
 800173e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	4b30      	ldr	r3, [pc, #192]	; (8001810 <HAL_ETH_MspInit+0x178>)
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	4a2f      	ldr	r2, [pc, #188]	; (8001810 <HAL_ETH_MspInit+0x178>)
 8001752:	f043 0302 	orr.w	r3, r3, #2
 8001756:	6313      	str	r3, [r2, #48]	; 0x30
 8001758:	4b2d      	ldr	r3, [pc, #180]	; (8001810 <HAL_ETH_MspInit+0x178>)
 800175a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	4b29      	ldr	r3, [pc, #164]	; (8001810 <HAL_ETH_MspInit+0x178>)
 800176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176c:	4a28      	ldr	r2, [pc, #160]	; (8001810 <HAL_ETH_MspInit+0x178>)
 800176e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001772:	6313      	str	r3, [r2, #48]	; 0x30
 8001774:	4b26      	ldr	r3, [pc, #152]	; (8001810 <HAL_ETH_MspInit+0x178>)
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001780:	2332      	movs	r3, #50	; 0x32
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178c:	2303      	movs	r3, #3
 800178e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001790:	230b      	movs	r3, #11
 8001792:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001794:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001798:	4619      	mov	r1, r3
 800179a:	481e      	ldr	r0, [pc, #120]	; (8001814 <HAL_ETH_MspInit+0x17c>)
 800179c:	f001 fa00 	bl	8002ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80017a0:	2386      	movs	r3, #134	; 0x86
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ac:	2303      	movs	r3, #3
 80017ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017b0:	230b      	movs	r3, #11
 80017b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b8:	4619      	mov	r1, r3
 80017ba:	4817      	ldr	r0, [pc, #92]	; (8001818 <HAL_ETH_MspInit+0x180>)
 80017bc:	f001 f9f0 	bl	8002ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80017c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	2302      	movs	r3, #2
 80017c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ce:	2303      	movs	r3, #3
 80017d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017d2:	230b      	movs	r3, #11
 80017d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80017d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017da:	4619      	mov	r1, r3
 80017dc:	480f      	ldr	r0, [pc, #60]	; (800181c <HAL_ETH_MspInit+0x184>)
 80017de:	f001 f9df 	bl	8002ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80017e2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f0:	2303      	movs	r3, #3
 80017f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017f4:	230b      	movs	r3, #11
 80017f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fc:	4619      	mov	r1, r3
 80017fe:	4808      	ldr	r0, [pc, #32]	; (8001820 <HAL_ETH_MspInit+0x188>)
 8001800:	f001 f9ce 	bl	8002ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001804:	bf00      	nop
 8001806:	3738      	adds	r7, #56	; 0x38
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40028000 	.word	0x40028000
 8001810:	40023800 	.word	0x40023800
 8001814:	40020800 	.word	0x40020800
 8001818:	40020000 	.word	0x40020000
 800181c:	40020400 	.word	0x40020400
 8001820:	40021800 	.word	0x40021800

08001824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	; 0x28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a19      	ldr	r2, [pc, #100]	; (80018a8 <HAL_UART_MspInit+0x84>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d12c      	bne.n	80018a0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	4b18      	ldr	r3, [pc, #96]	; (80018ac <HAL_UART_MspInit+0x88>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	4a17      	ldr	r2, [pc, #92]	; (80018ac <HAL_UART_MspInit+0x88>)
 8001850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001854:	6413      	str	r3, [r2, #64]	; 0x40
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_UART_MspInit+0x88>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <HAL_UART_MspInit+0x88>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a10      	ldr	r2, [pc, #64]	; (80018ac <HAL_UART_MspInit+0x88>)
 800186c:	f043 0308 	orr.w	r3, r3, #8
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <HAL_UART_MspInit+0x88>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800187e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188c:	2303      	movs	r3, #3
 800188e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001890:	2307      	movs	r3, #7
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4619      	mov	r1, r3
 800189a:	4805      	ldr	r0, [pc, #20]	; (80018b0 <HAL_UART_MspInit+0x8c>)
 800189c:	f001 f980 	bl	8002ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018a0:	bf00      	nop
 80018a2:	3728      	adds	r7, #40	; 0x28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40004800 	.word	0x40004800
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020c00 	.word	0x40020c00

080018b4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	; 0x28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018d4:	d13f      	bne.n	8001956 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	4b21      	ldr	r3, [pc, #132]	; (8001960 <HAL_PCD_MspInit+0xac>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a20      	ldr	r2, [pc, #128]	; (8001960 <HAL_PCD_MspInit+0xac>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <HAL_PCD_MspInit+0xac>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80018f2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80018f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001900:	2303      	movs	r3, #3
 8001902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001904:	230a      	movs	r3, #10
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	4619      	mov	r1, r3
 800190e:	4815      	ldr	r0, [pc, #84]	; (8001964 <HAL_PCD_MspInit+0xb0>)
 8001910:	f001 f946 	bl	8002ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001914:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191a:	2300      	movs	r3, #0
 800191c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	4619      	mov	r1, r3
 8001928:	480e      	ldr	r0, [pc, #56]	; (8001964 <HAL_PCD_MspInit+0xb0>)
 800192a:	f001 f939 	bl	8002ba0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <HAL_PCD_MspInit+0xac>)
 8001930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001932:	4a0b      	ldr	r2, [pc, #44]	; (8001960 <HAL_PCD_MspInit+0xac>)
 8001934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001938:	6353      	str	r3, [r2, #52]	; 0x34
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	4b08      	ldr	r3, [pc, #32]	; (8001960 <HAL_PCD_MspInit+0xac>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	4a07      	ldr	r2, [pc, #28]	; (8001960 <HAL_PCD_MspInit+0xac>)
 8001944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001948:	6453      	str	r3, [r2, #68]	; 0x44
 800194a:	4b05      	ldr	r3, [pc, #20]	; (8001960 <HAL_PCD_MspInit+0xac>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001956:	bf00      	nop
 8001958:	3728      	adds	r7, #40	; 0x28
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	40020000 	.word	0x40020000

08001968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800196c:	e7fe      	b.n	800196c <NMI_Handler+0x4>

0800196e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001972:	e7fe      	b.n	8001972 <HardFault_Handler+0x4>

08001974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <MemManage_Handler+0x4>

0800197a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <BusFault_Handler+0x4>

08001980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <UsageFault_Handler+0x4>

08001986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b4:	f000 f8c6 	bl	8001b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}

080019bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019c4:	4a14      	ldr	r2, [pc, #80]	; (8001a18 <_sbrk+0x5c>)
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <_sbrk+0x60>)
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019d0:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <_sbrk+0x64>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d102      	bne.n	80019de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <_sbrk+0x64>)
 80019da:	4a12      	ldr	r2, [pc, #72]	; (8001a24 <_sbrk+0x68>)
 80019dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <_sbrk+0x64>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d207      	bcs.n	80019fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019ec:	f002 ff78 	bl	80048e0 <__errno>
 80019f0:	4603      	mov	r3, r0
 80019f2:	220c      	movs	r2, #12
 80019f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019f6:	f04f 33ff 	mov.w	r3, #4294967295
 80019fa:	e009      	b.n	8001a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <_sbrk+0x64>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a02:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <_sbrk+0x64>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	4a05      	ldr	r2, [pc, #20]	; (8001a20 <_sbrk+0x64>)
 8001a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20030000 	.word	0x20030000
 8001a1c:	00000400 	.word	0x00000400
 8001a20:	20000840 	.word	0x20000840
 8001a24:	20000990 	.word	0x20000990

08001a28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <SystemInit+0x20>)
 8001a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a32:	4a05      	ldr	r2, [pc, #20]	; (8001a48 <SystemInit+0x20>)
 8001a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a50:	f7ff ffea 	bl	8001a28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a54:	480c      	ldr	r0, [pc, #48]	; (8001a88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a56:	490d      	ldr	r1, [pc, #52]	; (8001a8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a58:	4a0d      	ldr	r2, [pc, #52]	; (8001a90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a5c:	e002      	b.n	8001a64 <LoopCopyDataInit>

08001a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a62:	3304      	adds	r3, #4

08001a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a68:	d3f9      	bcc.n	8001a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a6c:	4c0a      	ldr	r4, [pc, #40]	; (8001a98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a70:	e001      	b.n	8001a76 <LoopFillZerobss>

08001a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a74:	3204      	adds	r2, #4

08001a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a78:	d3fb      	bcc.n	8001a72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a7a:	f002 ff37 	bl	80048ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a7e:	f7ff fb23 	bl	80010c8 <main>
  bx  lr    
 8001a82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a84:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a8c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001a90:	08005664 	.word	0x08005664
  ldr r2, =_sbss
 8001a94:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001a98:	20000990 	.word	0x20000990

08001a9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a9c:	e7fe      	b.n	8001a9c <ADC_IRQHandler>
	...

08001aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001aa4:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <HAL_Init+0x40>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a0d      	ldr	r2, [pc, #52]	; (8001ae0 <HAL_Init+0x40>)
 8001aaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_Init+0x40>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <HAL_Init+0x40>)
 8001ab6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <HAL_Init+0x40>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a07      	ldr	r2, [pc, #28]	; (8001ae0 <HAL_Init+0x40>)
 8001ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac8:	2003      	movs	r0, #3
 8001aca:	f000 fd0d 	bl	80024e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f000 f808 	bl	8001ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ad4:	f7ff fd74 	bl	80015c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023c00 	.word	0x40023c00

08001ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aec:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_InitTick+0x54>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_InitTick+0x58>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4619      	mov	r1, r3
 8001af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 fd17 	bl	8002536 <HAL_SYSTICK_Config>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00e      	b.n	8001b30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b0f      	cmp	r3, #15
 8001b16:	d80a      	bhi.n	8001b2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b20:	f000 fced 	bl	80024fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b24:	4a06      	ldr	r2, [pc, #24]	; (8001b40 <HAL_InitTick+0x5c>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e000      	b.n	8001b30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	20000008 	.word	0x20000008
 8001b40:	20000004 	.word	0x20000004

08001b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_IncTick+0x20>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_IncTick+0x24>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4413      	add	r3, r2
 8001b54:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <HAL_IncTick+0x24>)
 8001b56:	6013      	str	r3, [r2, #0]
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000008 	.word	0x20000008
 8001b68:	20000844 	.word	0x20000844

08001b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b70:	4b03      	ldr	r3, [pc, #12]	; (8001b80 <HAL_GetTick+0x14>)
 8001b72:	681b      	ldr	r3, [r3, #0]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20000844 	.word	0x20000844

08001b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b8c:	f7ff ffee 	bl	8001b6c <HAL_GetTick>
 8001b90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9c:	d005      	beq.n	8001baa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <HAL_Delay+0x44>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001baa:	bf00      	nop
 8001bac:	f7ff ffde 	bl	8001b6c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d8f7      	bhi.n	8001bac <HAL_Delay+0x28>
  {
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000008 	.word	0x20000008

08001bcc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e033      	b.n	8001c4a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d109      	bne.n	8001bfe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff fd10 	bl	8001610 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f003 0310 	and.w	r3, r3, #16
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d118      	bne.n	8001c3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c12:	f023 0302 	bic.w	r3, r3, #2
 8001c16:	f043 0202 	orr.w	r2, r3, #2
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 fab4 	bl	800218c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f023 0303 	bic.w	r3, r3, #3
 8001c32:	f043 0201 	orr.w	r2, r3, #1
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	641a      	str	r2, [r3, #64]	; 0x40
 8001c3a:	e001      	b.n	8001c40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d101      	bne.n	8001c6e <HAL_ADC_Start+0x1a>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e0b2      	b.n	8001dd4 <HAL_ADC_Start+0x180>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d018      	beq.n	8001cb6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 0201 	orr.w	r2, r2, #1
 8001c92:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c94:	4b52      	ldr	r3, [pc, #328]	; (8001de0 <HAL_ADC_Start+0x18c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a52      	ldr	r2, [pc, #328]	; (8001de4 <HAL_ADC_Start+0x190>)
 8001c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9e:	0c9a      	lsrs	r2, r3, #18
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001ca8:	e002      	b.n	8001cb0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	3b01      	subs	r3, #1
 8001cae:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f9      	bne.n	8001caa <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d17a      	bne.n	8001dba <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ccc:	f023 0301 	bic.w	r3, r3, #1
 8001cd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d007      	beq.n	8001cf6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d02:	d106      	bne.n	8001d12 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d08:	f023 0206 	bic.w	r2, r3, #6
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	645a      	str	r2, [r3, #68]	; 0x44
 8001d10:	e002      	b.n	8001d18 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d20:	4b31      	ldr	r3, [pc, #196]	; (8001de8 <HAL_ADC_Start+0x194>)
 8001d22:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d2c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 031f 	and.w	r3, r3, #31
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d12a      	bne.n	8001d90 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a2b      	ldr	r2, [pc, #172]	; (8001dec <HAL_ADC_Start+0x198>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d015      	beq.n	8001d70 <HAL_ADC_Start+0x11c>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a29      	ldr	r2, [pc, #164]	; (8001df0 <HAL_ADC_Start+0x19c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d105      	bne.n	8001d5a <HAL_ADC_Start+0x106>
 8001d4e:	4b26      	ldr	r3, [pc, #152]	; (8001de8 <HAL_ADC_Start+0x194>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 031f 	and.w	r3, r3, #31
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00a      	beq.n	8001d70 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a25      	ldr	r2, [pc, #148]	; (8001df4 <HAL_ADC_Start+0x1a0>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d136      	bne.n	8001dd2 <HAL_ADC_Start+0x17e>
 8001d64:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <HAL_ADC_Start+0x194>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0310 	and.w	r3, r3, #16
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d130      	bne.n	8001dd2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d129      	bne.n	8001dd2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	e020      	b.n	8001dd2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a15      	ldr	r2, [pc, #84]	; (8001dec <HAL_ADC_Start+0x198>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d11b      	bne.n	8001dd2 <HAL_ADC_Start+0x17e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d114      	bne.n	8001dd2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	e00b      	b.n	8001dd2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f043 0210 	orr.w	r2, r3, #16
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	f043 0201 	orr.w	r2, r3, #1
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	20000000 	.word	0x20000000
 8001de4:	431bde83 	.word	0x431bde83
 8001de8:	40012300 	.word	0x40012300
 8001dec:	40012000 	.word	0x40012000
 8001df0:	40012100 	.word	0x40012100
 8001df4:	40012200 	.word	0x40012200

08001df8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e14:	d113      	bne.n	8001e3e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e24:	d10b      	bne.n	8001e3e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	f043 0220 	orr.w	r2, r3, #32
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e063      	b.n	8001f06 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e3e:	f7ff fe95 	bl	8001b6c <HAL_GetTick>
 8001e42:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e44:	e021      	b.n	8001e8a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e4c:	d01d      	beq.n	8001e8a <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d007      	beq.n	8001e64 <HAL_ADC_PollForConversion+0x6c>
 8001e54:	f7ff fe8a 	bl	8001b6c <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d212      	bcs.n	8001e8a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d00b      	beq.n	8001e8a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f043 0204 	orr.w	r2, r3, #4
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e03d      	b.n	8001f06 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d1d6      	bne.n	8001e46 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0212 	mvn.w	r2, #18
 8001ea0:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d123      	bne.n	8001f04 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d11f      	bne.n	8001f04 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d006      	beq.n	8001ee0 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d111      	bne.n	8001f04 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d105      	bne.n	8001f04 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	f043 0201 	orr.w	r2, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x1c>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e113      	b.n	800216c <HAL_ADC_ConfigChannel+0x244>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b09      	cmp	r3, #9
 8001f52:	d925      	bls.n	8001fa0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68d9      	ldr	r1, [r3, #12]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	3b1e      	subs	r3, #30
 8001f6a:	2207      	movs	r2, #7
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43da      	mvns	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	400a      	ands	r2, r1
 8001f78:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68d9      	ldr	r1, [r3, #12]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4403      	add	r3, r0
 8001f92:	3b1e      	subs	r3, #30
 8001f94:	409a      	lsls	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	e022      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6919      	ldr	r1, [r3, #16]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	4613      	mov	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4413      	add	r3, r2
 8001fb4:	2207      	movs	r2, #7
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43da      	mvns	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	400a      	ands	r2, r1
 8001fc2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6919      	ldr	r1, [r3, #16]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4403      	add	r3, r0
 8001fdc:	409a      	lsls	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b06      	cmp	r3, #6
 8001fec:	d824      	bhi.n	8002038 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3b05      	subs	r3, #5
 8002000:	221f      	movs	r2, #31
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43da      	mvns	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	400a      	ands	r2, r1
 800200e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	b29b      	uxth	r3, r3
 800201c:	4618      	mov	r0, r3
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	3b05      	subs	r3, #5
 800202a:	fa00 f203 	lsl.w	r2, r0, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	635a      	str	r2, [r3, #52]	; 0x34
 8002036:	e04c      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b0c      	cmp	r3, #12
 800203e:	d824      	bhi.n	800208a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	3b23      	subs	r3, #35	; 0x23
 8002052:	221f      	movs	r2, #31
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43da      	mvns	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	400a      	ands	r2, r1
 8002060:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	b29b      	uxth	r3, r3
 800206e:	4618      	mov	r0, r3
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	3b23      	subs	r3, #35	; 0x23
 800207c:	fa00 f203 	lsl.w	r2, r0, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	631a      	str	r2, [r3, #48]	; 0x30
 8002088:	e023      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	3b41      	subs	r3, #65	; 0x41
 800209c:	221f      	movs	r2, #31
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43da      	mvns	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	400a      	ands	r2, r1
 80020aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	4618      	mov	r0, r3
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	3b41      	subs	r3, #65	; 0x41
 80020c6:	fa00 f203 	lsl.w	r2, r0, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020d2:	4b29      	ldr	r3, [pc, #164]	; (8002178 <HAL_ADC_ConfigChannel+0x250>)
 80020d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a28      	ldr	r2, [pc, #160]	; (800217c <HAL_ADC_ConfigChannel+0x254>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d10f      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x1d8>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b12      	cmp	r3, #18
 80020e6:	d10b      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a1d      	ldr	r2, [pc, #116]	; (800217c <HAL_ADC_ConfigChannel+0x254>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d12b      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x23a>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a1c      	ldr	r2, [pc, #112]	; (8002180 <HAL_ADC_ConfigChannel+0x258>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d003      	beq.n	800211c <HAL_ADC_ConfigChannel+0x1f4>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b11      	cmp	r3, #17
 800211a:	d122      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a11      	ldr	r2, [pc, #68]	; (8002180 <HAL_ADC_ConfigChannel+0x258>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d111      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800213e:	4b11      	ldr	r3, [pc, #68]	; (8002184 <HAL_ADC_ConfigChannel+0x25c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a11      	ldr	r2, [pc, #68]	; (8002188 <HAL_ADC_ConfigChannel+0x260>)
 8002144:	fba2 2303 	umull	r2, r3, r2, r3
 8002148:	0c9a      	lsrs	r2, r3, #18
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002154:	e002      	b.n	800215c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	3b01      	subs	r3, #1
 800215a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f9      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	40012300 	.word	0x40012300
 800217c:	40012000 	.word	0x40012000
 8002180:	10000012 	.word	0x10000012
 8002184:	20000000 	.word	0x20000000
 8002188:	431bde83 	.word	0x431bde83

0800218c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002194:	4b79      	ldr	r3, [pc, #484]	; (800237c <ADC_Init+0x1f0>)
 8002196:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	431a      	orrs	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6859      	ldr	r1, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	021a      	lsls	r2, r3, #8
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6859      	ldr	r1, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002206:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6899      	ldr	r1, [r3, #8]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68da      	ldr	r2, [r3, #12]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221e:	4a58      	ldr	r2, [pc, #352]	; (8002380 <ADC_Init+0x1f4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d022      	beq.n	800226a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002232:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6899      	ldr	r1, [r3, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002254:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6899      	ldr	r1, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	e00f      	b.n	800228a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002278:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002288:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0202 	bic.w	r2, r2, #2
 8002298:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6899      	ldr	r1, [r3, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	7e1b      	ldrb	r3, [r3, #24]
 80022a4:	005a      	lsls	r2, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d01b      	beq.n	80022f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022c6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6859      	ldr	r1, [r3, #4]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	3b01      	subs	r3, #1
 80022e4:	035a      	lsls	r2, r3, #13
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	e007      	b.n	8002300 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022fe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800230e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	3b01      	subs	r3, #1
 800231c:	051a      	lsls	r2, r3, #20
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002334:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6899      	ldr	r1, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002342:	025a      	lsls	r2, r3, #9
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800235a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6899      	ldr	r1, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	029a      	lsls	r2, r3, #10
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	609a      	str	r2, [r3, #8]
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	40012300 	.word	0x40012300
 8002380:	0f000001 	.word	0x0f000001

08002384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002394:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a0:	4013      	ands	r3, r2
 80023a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b6:	4a04      	ldr	r2, [pc, #16]	; (80023c8 <__NVIC_SetPriorityGrouping+0x44>)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	60d3      	str	r3, [r2, #12]
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d0:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <__NVIC_GetPriorityGrouping+0x18>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	0a1b      	lsrs	r3, r3, #8
 80023d6:	f003 0307 	and.w	r3, r3, #7
}
 80023da:	4618      	mov	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	6039      	str	r1, [r7, #0]
 80023f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	db0a      	blt.n	8002412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	490c      	ldr	r1, [pc, #48]	; (8002434 <__NVIC_SetPriority+0x4c>)
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	0112      	lsls	r2, r2, #4
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	440b      	add	r3, r1
 800240c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002410:	e00a      	b.n	8002428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	b2da      	uxtb	r2, r3
 8002416:	4908      	ldr	r1, [pc, #32]	; (8002438 <__NVIC_SetPriority+0x50>)
 8002418:	79fb      	ldrb	r3, [r7, #7]
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	3b04      	subs	r3, #4
 8002420:	0112      	lsls	r2, r2, #4
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	440b      	add	r3, r1
 8002426:	761a      	strb	r2, [r3, #24]
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	e000e100 	.word	0xe000e100
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800243c:	b480      	push	{r7}
 800243e:	b089      	sub	sp, #36	; 0x24
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f1c3 0307 	rsb	r3, r3, #7
 8002456:	2b04      	cmp	r3, #4
 8002458:	bf28      	it	cs
 800245a:	2304      	movcs	r3, #4
 800245c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3304      	adds	r3, #4
 8002462:	2b06      	cmp	r3, #6
 8002464:	d902      	bls.n	800246c <NVIC_EncodePriority+0x30>
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3b03      	subs	r3, #3
 800246a:	e000      	b.n	800246e <NVIC_EncodePriority+0x32>
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002470:	f04f 32ff 	mov.w	r2, #4294967295
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43da      	mvns	r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	401a      	ands	r2, r3
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002484:	f04f 31ff 	mov.w	r1, #4294967295
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	fa01 f303 	lsl.w	r3, r1, r3
 800248e:	43d9      	mvns	r1, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002494:	4313      	orrs	r3, r2
         );
}
 8002496:	4618      	mov	r0, r3
 8002498:	3724      	adds	r7, #36	; 0x24
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
	...

080024a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b4:	d301      	bcc.n	80024ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024b6:	2301      	movs	r3, #1
 80024b8:	e00f      	b.n	80024da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ba:	4a0a      	ldr	r2, [pc, #40]	; (80024e4 <SysTick_Config+0x40>)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3b01      	subs	r3, #1
 80024c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024c2:	210f      	movs	r1, #15
 80024c4:	f04f 30ff 	mov.w	r0, #4294967295
 80024c8:	f7ff ff8e 	bl	80023e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <SysTick_Config+0x40>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024d2:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <SysTick_Config+0x40>)
 80024d4:	2207      	movs	r2, #7
 80024d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	e000e010 	.word	0xe000e010

080024e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ff47 	bl	8002384 <__NVIC_SetPriorityGrouping>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024fe:	b580      	push	{r7, lr}
 8002500:	b086      	sub	sp, #24
 8002502:	af00      	add	r7, sp, #0
 8002504:	4603      	mov	r3, r0
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
 800250a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002510:	f7ff ff5c 	bl	80023cc <__NVIC_GetPriorityGrouping>
 8002514:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	68b9      	ldr	r1, [r7, #8]
 800251a:	6978      	ldr	r0, [r7, #20]
 800251c:	f7ff ff8e 	bl	800243c <NVIC_EncodePriority>
 8002520:	4602      	mov	r2, r0
 8002522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002526:	4611      	mov	r1, r2
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff5d 	bl	80023e8 <__NVIC_SetPriority>
}
 800252e:	bf00      	nop
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ffb0 	bl	80024a4 <SysTick_Config>
 8002544:	4603      	mov	r3, r0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e06c      	b.n	800263c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002568:	2b00      	cmp	r3, #0
 800256a:	d106      	bne.n	800257a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2223      	movs	r2, #35	; 0x23
 8002570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff f88f 	bl	8001698 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	4b31      	ldr	r3, [pc, #196]	; (8002644 <HAL_ETH_Init+0xf4>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	4a30      	ldr	r2, [pc, #192]	; (8002644 <HAL_ETH_Init+0xf4>)
 8002584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002588:	6453      	str	r3, [r2, #68]	; 0x44
 800258a:	4b2e      	ldr	r3, [pc, #184]	; (8002644 <HAL_ETH_Init+0xf4>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002596:	4b2c      	ldr	r3, [pc, #176]	; (8002648 <HAL_ETH_Init+0xf8>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	4a2b      	ldr	r2, [pc, #172]	; (8002648 <HAL_ETH_Init+0xf8>)
 800259c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80025a0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80025a2:	4b29      	ldr	r3, [pc, #164]	; (8002648 <HAL_ETH_Init+0xf8>)
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	4927      	ldr	r1, [pc, #156]	; (8002648 <HAL_ETH_Init+0xf8>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80025b0:	4b25      	ldr	r3, [pc, #148]	; (8002648 <HAL_ETH_Init+0xf8>)
 80025b2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025cc:	f7ff face 	bl	8001b6c <HAL_GetTick>
 80025d0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80025d2:	e011      	b.n	80025f8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80025d4:	f7ff faca 	bl	8001b6c <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80025e2:	d909      	bls.n	80025f8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2204      	movs	r2, #4
 80025e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	22e0      	movs	r2, #224	; 0xe0
 80025f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e021      	b.n	800263c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1e4      	bne.n	80025d4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f958 	bl	80028c0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f9ff 	bl	8002a14 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 fa55 	bl	8002ac6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	461a      	mov	r2, r3
 8002622:	2100      	movs	r1, #0
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f9bd 	bl	80029a4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2210      	movs	r2, #16
 8002636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40023800 	.word	0x40023800
 8002648:	40013800 	.word	0x40013800

0800264c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	4b51      	ldr	r3, [pc, #324]	; (80027a8 <ETH_SetMACConfig+0x15c>)
 8002662:	4013      	ands	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	7c1b      	ldrb	r3, [r3, #16]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d102      	bne.n	8002674 <ETH_SetMACConfig+0x28>
 800266e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002672:	e000      	b.n	8002676 <ETH_SetMACConfig+0x2a>
 8002674:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	7c5b      	ldrb	r3, [r3, #17]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d102      	bne.n	8002684 <ETH_SetMACConfig+0x38>
 800267e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002682:	e000      	b.n	8002686 <ETH_SetMACConfig+0x3a>
 8002684:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002686:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800268c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	7fdb      	ldrb	r3, [r3, #31]
 8002692:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002694:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800269a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	7f92      	ldrb	r2, [r2, #30]
 80026a0:	2a00      	cmp	r2, #0
 80026a2:	d102      	bne.n	80026aa <ETH_SetMACConfig+0x5e>
 80026a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026a8:	e000      	b.n	80026ac <ETH_SetMACConfig+0x60>
 80026aa:	2200      	movs	r2, #0
                        macconf->Speed |
 80026ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	7f1b      	ldrb	r3, [r3, #28]
 80026b2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80026b4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80026ba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	791b      	ldrb	r3, [r3, #4]
 80026c0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80026c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80026ca:	2a00      	cmp	r2, #0
 80026cc:	d102      	bne.n	80026d4 <ETH_SetMACConfig+0x88>
 80026ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026d2:	e000      	b.n	80026d6 <ETH_SetMACConfig+0x8a>
 80026d4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80026d6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	7bdb      	ldrb	r3, [r3, #15]
 80026dc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026de:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026ec:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80026ee:	4313      	orrs	r3, r2
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002706:	2001      	movs	r0, #1
 8002708:	f7ff fa3c 	bl	8001b84 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002722:	4013      	ands	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800272a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002732:	2a00      	cmp	r2, #0
 8002734:	d101      	bne.n	800273a <ETH_SetMACConfig+0xee>
 8002736:	2280      	movs	r2, #128	; 0x80
 8002738:	e000      	b.n	800273c <ETH_SetMACConfig+0xf0>
 800273a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800273c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002742:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800274a:	2a01      	cmp	r2, #1
 800274c:	d101      	bne.n	8002752 <ETH_SetMACConfig+0x106>
 800274e:	2208      	movs	r2, #8
 8002750:	e000      	b.n	8002754 <ETH_SetMACConfig+0x108>
 8002752:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002754:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800275c:	2a01      	cmp	r2, #1
 800275e:	d101      	bne.n	8002764 <ETH_SetMACConfig+0x118>
 8002760:	2204      	movs	r2, #4
 8002762:	e000      	b.n	8002766 <ETH_SetMACConfig+0x11a>
 8002764:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002766:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800276e:	2a01      	cmp	r2, #1
 8002770:	d101      	bne.n	8002776 <ETH_SetMACConfig+0x12a>
 8002772:	2202      	movs	r2, #2
 8002774:	e000      	b.n	8002778 <ETH_SetMACConfig+0x12c>
 8002776:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002778:	4313      	orrs	r3, r2
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4313      	orrs	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002790:	2001      	movs	r0, #1
 8002792:	f7ff f9f7 	bl	8001b84 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	619a      	str	r2, [r3, #24]
}
 800279e:	bf00      	nop
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	ff20810f 	.word	0xff20810f

080027ac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	4b3d      	ldr	r3, [pc, #244]	; (80028bc <ETH_SetDMAConfig+0x110>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	7b1b      	ldrb	r3, [r3, #12]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d102      	bne.n	80027d8 <ETH_SetDMAConfig+0x2c>
 80027d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80027d6:	e000      	b.n	80027da <ETH_SetDMAConfig+0x2e>
 80027d8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	7b5b      	ldrb	r3, [r3, #13]
 80027de:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027e0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	7f52      	ldrb	r2, [r2, #29]
 80027e6:	2a00      	cmp	r2, #0
 80027e8:	d102      	bne.n	80027f0 <ETH_SetDMAConfig+0x44>
 80027ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027ee:	e000      	b.n	80027f2 <ETH_SetDMAConfig+0x46>
 80027f0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80027f2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	7b9b      	ldrb	r3, [r3, #14]
 80027f8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80027fa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002800:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	7f1b      	ldrb	r3, [r3, #28]
 8002806:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002808:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	7f9b      	ldrb	r3, [r3, #30]
 800280e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002810:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002816:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800281e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002820:	4313      	orrs	r3, r2
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	4313      	orrs	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002830:	461a      	mov	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002842:	2001      	movs	r0, #1
 8002844:	f7ff f99e 	bl	8001b84 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002850:	461a      	mov	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	791b      	ldrb	r3, [r3, #4]
 800285a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002860:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002866:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800286c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002874:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002876:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800287e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002884:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6812      	ldr	r2, [r2, #0]
 800288a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800288e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002892:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028a0:	2001      	movs	r0, #1
 80028a2:	f7ff f96f 	bl	8001b84 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ae:	461a      	mov	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6013      	str	r3, [r2, #0]
}
 80028b4:	bf00      	nop
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	f8de3f23 	.word	0xf8de3f23

080028c0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b0a6      	sub	sp, #152	; 0x98
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80028c8:	2301      	movs	r3, #1
 80028ca:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80028ce:	2301      	movs	r3, #1
 80028d0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80028d4:	2300      	movs	r3, #0
 80028d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80028d8:	2300      	movs	r3, #0
 80028da:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80028de:	2301      	movs	r3, #1
 80028e0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80028e4:	2300      	movs	r3, #0
 80028e6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80028ea:	2301      	movs	r3, #1
 80028ec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80028f0:	2300      	movs	r3, #0
 80028f2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80028f6:	2300      	movs	r3, #0
 80028f8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80028fc:	2300      	movs	r3, #0
 80028fe:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002900:	2300      	movs	r3, #0
 8002902:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002906:	2300      	movs	r3, #0
 8002908:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800290a:	2300      	movs	r3, #0
 800290c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002910:	2300      	movs	r3, #0
 8002912:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002916:	2300      	movs	r3, #0
 8002918:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800291c:	2300      	movs	r3, #0
 800291e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002922:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002926:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002928:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800292c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800292e:	2300      	movs	r3, #0
 8002930:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002934:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002938:	4619      	mov	r1, r3
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff fe86 	bl	800264c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002940:	2301      	movs	r3, #1
 8002942:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002944:	2301      	movs	r3, #1
 8002946:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002948:	2301      	movs	r3, #1
 800294a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800294e:	2301      	movs	r3, #1
 8002950:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002956:	2300      	movs	r3, #0
 8002958:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800295c:	2300      	movs	r3, #0
 800295e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002962:	2300      	movs	r3, #0
 8002964:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002966:	2301      	movs	r3, #1
 8002968:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800296c:	2301      	movs	r3, #1
 800296e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002970:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002974:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002976:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800297a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800297c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002980:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002982:	2301      	movs	r3, #1
 8002984:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002988:	2300      	movs	r3, #0
 800298a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800298c:	2300      	movs	r3, #0
 800298e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002990:	f107 0308 	add.w	r3, r7, #8
 8002994:	4619      	mov	r1, r3
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff ff08 	bl	80027ac <ETH_SetDMAConfig>
}
 800299c:	bf00      	nop
 800299e:	3798      	adds	r7, #152	; 0x98
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3305      	adds	r3, #5
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	021b      	lsls	r3, r3, #8
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	3204      	adds	r2, #4
 80029bc:	7812      	ldrb	r2, [r2, #0]
 80029be:	4313      	orrs	r3, r2
 80029c0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <ETH_MACAddressConfig+0x68>)
 80029c6:	4413      	add	r3, r2
 80029c8:	461a      	mov	r2, r3
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3303      	adds	r3, #3
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	061a      	lsls	r2, r3, #24
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3302      	adds	r3, #2
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	041b      	lsls	r3, r3, #16
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3301      	adds	r3, #1
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	021b      	lsls	r3, r3, #8
 80029e8:	4313      	orrs	r3, r2
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	7812      	ldrb	r2, [r2, #0]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <ETH_MACAddressConfig+0x6c>)
 80029f6:	4413      	add	r3, r2
 80029f8:	461a      	mov	r2, r3
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	6013      	str	r3, [r2, #0]
}
 80029fe:	bf00      	nop
 8002a00:	371c      	adds	r7, #28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40028040 	.word	0x40028040
 8002a10:	40028044 	.word	0x40028044

08002a14 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	e03e      	b.n	8002aa0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68d9      	ldr	r1, [r3, #12]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	440b      	add	r3, r1
 8002a32:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2200      	movs	r2, #0
 8002a44:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a4c:	68b9      	ldr	r1, [r7, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	3206      	adds	r2, #6
 8002a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d80c      	bhi.n	8002a84 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68d9      	ldr	r1, [r3, #12]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	440b      	add	r3, r1
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	60da      	str	r2, [r3, #12]
 8002a82:	e004      	b.n	8002a8e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	d9bd      	bls.n	8002a22 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ab8:	611a      	str	r2, [r3, #16]
}
 8002aba:	bf00      	nop
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b085      	sub	sp, #20
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	e046      	b.n	8002b62 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6919      	ldr	r1, [r3, #16]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	440b      	add	r3, r1
 8002ae4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2200      	movs	r2, #0
 8002af0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2200      	movs	r2, #0
 8002af6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2200      	movs	r2, #0
 8002afc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2200      	movs	r2, #0
 8002b02:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2200      	movs	r2, #0
 8002b08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002b10:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002b18:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002b26:	68b9      	ldr	r1, [r7, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	3212      	adds	r2, #18
 8002b2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d80c      	bhi.n	8002b52 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6919      	ldr	r1, [r3, #16]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	440b      	add	r3, r1
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	60da      	str	r2, [r3, #12]
 8002b50:	e004      	b.n	8002b5c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	461a      	mov	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d9b5      	bls.n	8002ad4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b92:	60da      	str	r2, [r3, #12]
}
 8002b94:	bf00      	nop
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b089      	sub	sp, #36	; 0x24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
 8002bba:	e177      	b.n	8002eac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	f040 8166 	bne.w	8002ea6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d005      	beq.n	8002bf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d130      	bne.n	8002c54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	2203      	movs	r2, #3
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4013      	ands	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c28:	2201      	movs	r2, #1
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	f003 0201 	and.w	r2, r3, #1
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d017      	beq.n	8002c90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	2203      	movs	r2, #3
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d123      	bne.n	8002ce4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	08da      	lsrs	r2, r3, #3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3208      	adds	r2, #8
 8002ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	220f      	movs	r2, #15
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	691a      	ldr	r2, [r3, #16]
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	08da      	lsrs	r2, r3, #3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3208      	adds	r2, #8
 8002cde:	69b9      	ldr	r1, [r7, #24]
 8002ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	2203      	movs	r2, #3
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 0203 	and.w	r2, r3, #3
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80c0 	beq.w	8002ea6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	4b66      	ldr	r3, [pc, #408]	; (8002ec4 <HAL_GPIO_Init+0x324>)
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	4a65      	ldr	r2, [pc, #404]	; (8002ec4 <HAL_GPIO_Init+0x324>)
 8002d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d34:	6453      	str	r3, [r2, #68]	; 0x44
 8002d36:	4b63      	ldr	r3, [pc, #396]	; (8002ec4 <HAL_GPIO_Init+0x324>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d42:	4a61      	ldr	r2, [pc, #388]	; (8002ec8 <HAL_GPIO_Init+0x328>)
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	089b      	lsrs	r3, r3, #2
 8002d48:	3302      	adds	r3, #2
 8002d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	220f      	movs	r2, #15
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4013      	ands	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a58      	ldr	r2, [pc, #352]	; (8002ecc <HAL_GPIO_Init+0x32c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d037      	beq.n	8002dde <HAL_GPIO_Init+0x23e>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a57      	ldr	r2, [pc, #348]	; (8002ed0 <HAL_GPIO_Init+0x330>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d031      	beq.n	8002dda <HAL_GPIO_Init+0x23a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a56      	ldr	r2, [pc, #344]	; (8002ed4 <HAL_GPIO_Init+0x334>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d02b      	beq.n	8002dd6 <HAL_GPIO_Init+0x236>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a55      	ldr	r2, [pc, #340]	; (8002ed8 <HAL_GPIO_Init+0x338>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d025      	beq.n	8002dd2 <HAL_GPIO_Init+0x232>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a54      	ldr	r2, [pc, #336]	; (8002edc <HAL_GPIO_Init+0x33c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d01f      	beq.n	8002dce <HAL_GPIO_Init+0x22e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a53      	ldr	r2, [pc, #332]	; (8002ee0 <HAL_GPIO_Init+0x340>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d019      	beq.n	8002dca <HAL_GPIO_Init+0x22a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a52      	ldr	r2, [pc, #328]	; (8002ee4 <HAL_GPIO_Init+0x344>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <HAL_GPIO_Init+0x226>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a51      	ldr	r2, [pc, #324]	; (8002ee8 <HAL_GPIO_Init+0x348>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00d      	beq.n	8002dc2 <HAL_GPIO_Init+0x222>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a50      	ldr	r2, [pc, #320]	; (8002eec <HAL_GPIO_Init+0x34c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d007      	beq.n	8002dbe <HAL_GPIO_Init+0x21e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a4f      	ldr	r2, [pc, #316]	; (8002ef0 <HAL_GPIO_Init+0x350>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d101      	bne.n	8002dba <HAL_GPIO_Init+0x21a>
 8002db6:	2309      	movs	r3, #9
 8002db8:	e012      	b.n	8002de0 <HAL_GPIO_Init+0x240>
 8002dba:	230a      	movs	r3, #10
 8002dbc:	e010      	b.n	8002de0 <HAL_GPIO_Init+0x240>
 8002dbe:	2308      	movs	r3, #8
 8002dc0:	e00e      	b.n	8002de0 <HAL_GPIO_Init+0x240>
 8002dc2:	2307      	movs	r3, #7
 8002dc4:	e00c      	b.n	8002de0 <HAL_GPIO_Init+0x240>
 8002dc6:	2306      	movs	r3, #6
 8002dc8:	e00a      	b.n	8002de0 <HAL_GPIO_Init+0x240>
 8002dca:	2305      	movs	r3, #5
 8002dcc:	e008      	b.n	8002de0 <HAL_GPIO_Init+0x240>
 8002dce:	2304      	movs	r3, #4
 8002dd0:	e006      	b.n	8002de0 <HAL_GPIO_Init+0x240>
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e004      	b.n	8002de0 <HAL_GPIO_Init+0x240>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e002      	b.n	8002de0 <HAL_GPIO_Init+0x240>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e000      	b.n	8002de0 <HAL_GPIO_Init+0x240>
 8002dde:	2300      	movs	r3, #0
 8002de0:	69fa      	ldr	r2, [r7, #28]
 8002de2:	f002 0203 	and.w	r2, r2, #3
 8002de6:	0092      	lsls	r2, r2, #2
 8002de8:	4093      	lsls	r3, r2
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002df0:	4935      	ldr	r1, [pc, #212]	; (8002ec8 <HAL_GPIO_Init+0x328>)
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	089b      	lsrs	r3, r3, #2
 8002df6:	3302      	adds	r3, #2
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dfe:	4b3d      	ldr	r3, [pc, #244]	; (8002ef4 <HAL_GPIO_Init+0x354>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e22:	4a34      	ldr	r2, [pc, #208]	; (8002ef4 <HAL_GPIO_Init+0x354>)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e28:	4b32      	ldr	r3, [pc, #200]	; (8002ef4 <HAL_GPIO_Init+0x354>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e4c:	4a29      	ldr	r2, [pc, #164]	; (8002ef4 <HAL_GPIO_Init+0x354>)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e52:	4b28      	ldr	r3, [pc, #160]	; (8002ef4 <HAL_GPIO_Init+0x354>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e76:	4a1f      	ldr	r2, [pc, #124]	; (8002ef4 <HAL_GPIO_Init+0x354>)
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <HAL_GPIO_Init+0x354>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ea0:	4a14      	ldr	r2, [pc, #80]	; (8002ef4 <HAL_GPIO_Init+0x354>)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	61fb      	str	r3, [r7, #28]
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	2b0f      	cmp	r3, #15
 8002eb0:	f67f ae84 	bls.w	8002bbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	3724      	adds	r7, #36	; 0x24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	40013800 	.word	0x40013800
 8002ecc:	40020000 	.word	0x40020000
 8002ed0:	40020400 	.word	0x40020400
 8002ed4:	40020800 	.word	0x40020800
 8002ed8:	40020c00 	.word	0x40020c00
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	40021400 	.word	0x40021400
 8002ee4:	40021800 	.word	0x40021800
 8002ee8:	40021c00 	.word	0x40021c00
 8002eec:	40022000 	.word	0x40022000
 8002ef0:	40022400 	.word	0x40022400
 8002ef4:	40013c00 	.word	0x40013c00

08002ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	807b      	strh	r3, [r7, #2]
 8002f04:	4613      	mov	r3, r2
 8002f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f08:	787b      	ldrb	r3, [r7, #1]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f0e:	887a      	ldrh	r2, [r7, #2]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f14:	e003      	b.n	8002f1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f16:	887b      	ldrh	r3, [r7, #2]
 8002f18:	041a      	lsls	r2, r3, #16
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	619a      	str	r2, [r3, #24]
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b086      	sub	sp, #24
 8002f2e:	af02      	add	r7, sp, #8
 8002f30:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e101      	b.n	8003140 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d106      	bne.n	8002f5c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7fe fcac 	bl	80018b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2203      	movs	r2, #3
 8002f60:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f6a:	d102      	bne.n	8002f72 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f001 f9ee 	bl	8004358 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6818      	ldr	r0, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	7c1a      	ldrb	r2, [r3, #16]
 8002f84:	f88d 2000 	strb.w	r2, [sp]
 8002f88:	3304      	adds	r3, #4
 8002f8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f8c:	f001 f980 	bl	8004290 <USB_CoreInit>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d005      	beq.n	8002fa2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2202      	movs	r2, #2
 8002f9a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e0ce      	b.n	8003140 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f001 f9e6 	bl	800437a <USB_SetCurrentMode>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0bf      	b.n	8003140 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	73fb      	strb	r3, [r7, #15]
 8002fc4:	e04a      	b.n	800305c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fc6:	7bfa      	ldrb	r2, [r7, #15]
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	4413      	add	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	3315      	adds	r3, #21
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fda:	7bfa      	ldrb	r2, [r7, #15]
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	3314      	adds	r3, #20
 8002fea:	7bfa      	ldrb	r2, [r7, #15]
 8002fec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fee:	7bfa      	ldrb	r2, [r7, #15]
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
 8002ff2:	b298      	uxth	r0, r3
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	332e      	adds	r3, #46	; 0x2e
 8003002:	4602      	mov	r2, r0
 8003004:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003006:	7bfa      	ldrb	r2, [r7, #15]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	4413      	add	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	3318      	adds	r3, #24
 8003016:	2200      	movs	r2, #0
 8003018:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800301a:	7bfa      	ldrb	r2, [r7, #15]
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	4613      	mov	r3, r2
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	4413      	add	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	440b      	add	r3, r1
 8003028:	331c      	adds	r3, #28
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800302e:	7bfa      	ldrb	r2, [r7, #15]
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	4413      	add	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	3320      	adds	r3, #32
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003042:	7bfa      	ldrb	r2, [r7, #15]
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	4613      	mov	r3, r2
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	4413      	add	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	3324      	adds	r3, #36	; 0x24
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	3301      	adds	r3, #1
 800305a:	73fb      	strb	r3, [r7, #15]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	791b      	ldrb	r3, [r3, #4]
 8003060:	7bfa      	ldrb	r2, [r7, #15]
 8003062:	429a      	cmp	r2, r3
 8003064:	d3af      	bcc.n	8002fc6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003066:	2300      	movs	r3, #0
 8003068:	73fb      	strb	r3, [r7, #15]
 800306a:	e044      	b.n	80030f6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800306c:	7bfa      	ldrb	r2, [r7, #15]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	f203 2355 	addw	r3, r3, #597	; 0x255
 800307e:	2200      	movs	r2, #0
 8003080:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003082:	7bfa      	ldrb	r2, [r7, #15]
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	4613      	mov	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4413      	add	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8003094:	7bfa      	ldrb	r2, [r7, #15]
 8003096:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003098:	7bfa      	ldrb	r2, [r7, #15]
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	4613      	mov	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80030aa:	2200      	movs	r2, #0
 80030ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030ae:	7bfa      	ldrb	r2, [r7, #15]
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	4413      	add	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030c4:	7bfa      	ldrb	r2, [r7, #15]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030da:	7bfa      	ldrb	r2, [r7, #15]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	3301      	adds	r3, #1
 80030f4:	73fb      	strb	r3, [r7, #15]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	791b      	ldrb	r3, [r3, #4]
 80030fa:	7bfa      	ldrb	r2, [r7, #15]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d3b5      	bcc.n	800306c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6818      	ldr	r0, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	7c1a      	ldrb	r2, [r3, #16]
 8003108:	f88d 2000 	strb.w	r2, [sp]
 800310c:	3304      	adds	r3, #4
 800310e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003110:	f001 f980 	bl	8004414 <USB_DevInit>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d005      	beq.n	8003126 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2202      	movs	r2, #2
 800311e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e00c      	b.n	8003140 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f001 fb48 	bl	80047ce <USB_DevDisconnect>

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e267      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d075      	beq.n	8003252 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003166:	4b88      	ldr	r3, [pc, #544]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b04      	cmp	r3, #4
 8003170:	d00c      	beq.n	800318c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003172:	4b85      	ldr	r3, [pc, #532]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800317a:	2b08      	cmp	r3, #8
 800317c:	d112      	bne.n	80031a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800317e:	4b82      	ldr	r3, [pc, #520]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003186:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800318a:	d10b      	bne.n	80031a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800318c:	4b7e      	ldr	r3, [pc, #504]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d05b      	beq.n	8003250 <HAL_RCC_OscConfig+0x108>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d157      	bne.n	8003250 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e242      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ac:	d106      	bne.n	80031bc <HAL_RCC_OscConfig+0x74>
 80031ae:	4b76      	ldr	r3, [pc, #472]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a75      	ldr	r2, [pc, #468]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80031b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	e01d      	b.n	80031f8 <HAL_RCC_OscConfig+0xb0>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031c4:	d10c      	bne.n	80031e0 <HAL_RCC_OscConfig+0x98>
 80031c6:	4b70      	ldr	r3, [pc, #448]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a6f      	ldr	r2, [pc, #444]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80031cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	4b6d      	ldr	r3, [pc, #436]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a6c      	ldr	r2, [pc, #432]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80031d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	e00b      	b.n	80031f8 <HAL_RCC_OscConfig+0xb0>
 80031e0:	4b69      	ldr	r3, [pc, #420]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a68      	ldr	r2, [pc, #416]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80031e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	4b66      	ldr	r3, [pc, #408]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a65      	ldr	r2, [pc, #404]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80031f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d013      	beq.n	8003228 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003200:	f7fe fcb4 	bl	8001b6c <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003208:	f7fe fcb0 	bl	8001b6c <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b64      	cmp	r3, #100	; 0x64
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e207      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321a:	4b5b      	ldr	r3, [pc, #364]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCC_OscConfig+0xc0>
 8003226:	e014      	b.n	8003252 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003228:	f7fe fca0 	bl	8001b6c <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003230:	f7fe fc9c 	bl	8001b6c <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b64      	cmp	r3, #100	; 0x64
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e1f3      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003242:	4b51      	ldr	r3, [pc, #324]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f0      	bne.n	8003230 <HAL_RCC_OscConfig+0xe8>
 800324e:	e000      	b.n	8003252 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d063      	beq.n	8003326 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800325e:	4b4a      	ldr	r3, [pc, #296]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 030c 	and.w	r3, r3, #12
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00b      	beq.n	8003282 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800326a:	4b47      	ldr	r3, [pc, #284]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003272:	2b08      	cmp	r3, #8
 8003274:	d11c      	bne.n	80032b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003276:	4b44      	ldr	r3, [pc, #272]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d116      	bne.n	80032b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003282:	4b41      	ldr	r3, [pc, #260]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d005      	beq.n	800329a <HAL_RCC_OscConfig+0x152>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d001      	beq.n	800329a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e1c7      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329a:	4b3b      	ldr	r3, [pc, #236]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	4937      	ldr	r1, [pc, #220]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ae:	e03a      	b.n	8003326 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d020      	beq.n	80032fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b8:	4b34      	ldr	r3, [pc, #208]	; (800338c <HAL_RCC_OscConfig+0x244>)
 80032ba:	2201      	movs	r2, #1
 80032bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032be:	f7fe fc55 	bl	8001b6c <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032c6:	f7fe fc51 	bl	8001b6c <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e1a8      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d8:	4b2b      	ldr	r3, [pc, #172]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0f0      	beq.n	80032c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e4:	4b28      	ldr	r3, [pc, #160]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	4925      	ldr	r1, [pc, #148]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	600b      	str	r3, [r1, #0]
 80032f8:	e015      	b.n	8003326 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032fa:	4b24      	ldr	r3, [pc, #144]	; (800338c <HAL_RCC_OscConfig+0x244>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003300:	f7fe fc34 	bl	8001b6c <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003308:	f7fe fc30 	bl	8001b6c <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e187      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800331a:	4b1b      	ldr	r3, [pc, #108]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1f0      	bne.n	8003308 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d036      	beq.n	80033a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d016      	beq.n	8003368 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800333a:	4b15      	ldr	r3, [pc, #84]	; (8003390 <HAL_RCC_OscConfig+0x248>)
 800333c:	2201      	movs	r2, #1
 800333e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003340:	f7fe fc14 	bl	8001b6c <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003348:	f7fe fc10 	bl	8001b6c <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e167      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800335a:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_RCC_OscConfig+0x240>)
 800335c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0f0      	beq.n	8003348 <HAL_RCC_OscConfig+0x200>
 8003366:	e01b      	b.n	80033a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003368:	4b09      	ldr	r3, [pc, #36]	; (8003390 <HAL_RCC_OscConfig+0x248>)
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800336e:	f7fe fbfd 	bl	8001b6c <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003374:	e00e      	b.n	8003394 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003376:	f7fe fbf9 	bl	8001b6c <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d907      	bls.n	8003394 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e150      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
 8003388:	40023800 	.word	0x40023800
 800338c:	42470000 	.word	0x42470000
 8003390:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003394:	4b88      	ldr	r3, [pc, #544]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1ea      	bne.n	8003376 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 8097 	beq.w	80034dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ae:	2300      	movs	r3, #0
 80033b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033b2:	4b81      	ldr	r3, [pc, #516]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10f      	bne.n	80033de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	4b7d      	ldr	r3, [pc, #500]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	4a7c      	ldr	r2, [pc, #496]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 80033c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033cc:	6413      	str	r3, [r2, #64]	; 0x40
 80033ce:	4b7a      	ldr	r3, [pc, #488]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d6:	60bb      	str	r3, [r7, #8]
 80033d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033da:	2301      	movs	r3, #1
 80033dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033de:	4b77      	ldr	r3, [pc, #476]	; (80035bc <HAL_RCC_OscConfig+0x474>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d118      	bne.n	800341c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ea:	4b74      	ldr	r3, [pc, #464]	; (80035bc <HAL_RCC_OscConfig+0x474>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a73      	ldr	r2, [pc, #460]	; (80035bc <HAL_RCC_OscConfig+0x474>)
 80033f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033f6:	f7fe fbb9 	bl	8001b6c <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033fe:	f7fe fbb5 	bl	8001b6c <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e10c      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003410:	4b6a      	ldr	r3, [pc, #424]	; (80035bc <HAL_RCC_OscConfig+0x474>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0f0      	beq.n	80033fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d106      	bne.n	8003432 <HAL_RCC_OscConfig+0x2ea>
 8003424:	4b64      	ldr	r3, [pc, #400]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003428:	4a63      	ldr	r2, [pc, #396]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 800342a:	f043 0301 	orr.w	r3, r3, #1
 800342e:	6713      	str	r3, [r2, #112]	; 0x70
 8003430:	e01c      	b.n	800346c <HAL_RCC_OscConfig+0x324>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b05      	cmp	r3, #5
 8003438:	d10c      	bne.n	8003454 <HAL_RCC_OscConfig+0x30c>
 800343a:	4b5f      	ldr	r3, [pc, #380]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343e:	4a5e      	ldr	r2, [pc, #376]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003440:	f043 0304 	orr.w	r3, r3, #4
 8003444:	6713      	str	r3, [r2, #112]	; 0x70
 8003446:	4b5c      	ldr	r3, [pc, #368]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344a:	4a5b      	ldr	r2, [pc, #364]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	6713      	str	r3, [r2, #112]	; 0x70
 8003452:	e00b      	b.n	800346c <HAL_RCC_OscConfig+0x324>
 8003454:	4b58      	ldr	r3, [pc, #352]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003458:	4a57      	ldr	r2, [pc, #348]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 800345a:	f023 0301 	bic.w	r3, r3, #1
 800345e:	6713      	str	r3, [r2, #112]	; 0x70
 8003460:	4b55      	ldr	r3, [pc, #340]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003464:	4a54      	ldr	r2, [pc, #336]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003466:	f023 0304 	bic.w	r3, r3, #4
 800346a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d015      	beq.n	80034a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003474:	f7fe fb7a 	bl	8001b6c <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800347a:	e00a      	b.n	8003492 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800347c:	f7fe fb76 	bl	8001b6c <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	f241 3288 	movw	r2, #5000	; 0x1388
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e0cb      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003492:	4b49      	ldr	r3, [pc, #292]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0ee      	beq.n	800347c <HAL_RCC_OscConfig+0x334>
 800349e:	e014      	b.n	80034ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a0:	f7fe fb64 	bl	8001b6c <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a6:	e00a      	b.n	80034be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a8:	f7fe fb60 	bl	8001b6c <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e0b5      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034be:	4b3e      	ldr	r3, [pc, #248]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 80034c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1ee      	bne.n	80034a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ca:	7dfb      	ldrb	r3, [r7, #23]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d105      	bne.n	80034dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d0:	4b39      	ldr	r3, [pc, #228]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	4a38      	ldr	r2, [pc, #224]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 80034d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 80a1 	beq.w	8003628 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034e6:	4b34      	ldr	r3, [pc, #208]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d05c      	beq.n	80035ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d141      	bne.n	800357e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fa:	4b31      	ldr	r3, [pc, #196]	; (80035c0 <HAL_RCC_OscConfig+0x478>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003500:	f7fe fb34 	bl	8001b6c <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003508:	f7fe fb30 	bl	8001b6c <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e087      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351a:	4b27      	ldr	r3, [pc, #156]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69da      	ldr	r2, [r3, #28]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	019b      	lsls	r3, r3, #6
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353c:	085b      	lsrs	r3, r3, #1
 800353e:	3b01      	subs	r3, #1
 8003540:	041b      	lsls	r3, r3, #16
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003548:	061b      	lsls	r3, r3, #24
 800354a:	491b      	ldr	r1, [pc, #108]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 800354c:	4313      	orrs	r3, r2
 800354e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003550:	4b1b      	ldr	r3, [pc, #108]	; (80035c0 <HAL_RCC_OscConfig+0x478>)
 8003552:	2201      	movs	r2, #1
 8003554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003556:	f7fe fb09 	bl	8001b6c <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800355e:	f7fe fb05 	bl	8001b6c <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e05c      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003570:	4b11      	ldr	r3, [pc, #68]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0f0      	beq.n	800355e <HAL_RCC_OscConfig+0x416>
 800357c:	e054      	b.n	8003628 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357e:	4b10      	ldr	r3, [pc, #64]	; (80035c0 <HAL_RCC_OscConfig+0x478>)
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003584:	f7fe faf2 	bl	8001b6c <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800358c:	f7fe faee 	bl	8001b6c <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e045      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359e:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <HAL_RCC_OscConfig+0x470>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f0      	bne.n	800358c <HAL_RCC_OscConfig+0x444>
 80035aa:	e03d      	b.n	8003628 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d107      	bne.n	80035c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e038      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
 80035b8:	40023800 	.word	0x40023800
 80035bc:	40007000 	.word	0x40007000
 80035c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035c4:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <HAL_RCC_OscConfig+0x4ec>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d028      	beq.n	8003624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035dc:	429a      	cmp	r2, r3
 80035de:	d121      	bne.n	8003624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d11a      	bne.n	8003624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035f4:	4013      	ands	r3, r2
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d111      	bne.n	8003624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360a:	085b      	lsrs	r3, r3, #1
 800360c:	3b01      	subs	r3, #1
 800360e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003610:	429a      	cmp	r2, r3
 8003612:	d107      	bne.n	8003624 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003620:	429a      	cmp	r2, r3
 8003622:	d001      	beq.n	8003628 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40023800 	.word	0x40023800

08003638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e0cc      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800364c:	4b68      	ldr	r3, [pc, #416]	; (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 030f 	and.w	r3, r3, #15
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d90c      	bls.n	8003674 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365a:	4b65      	ldr	r3, [pc, #404]	; (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003662:	4b63      	ldr	r3, [pc, #396]	; (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	429a      	cmp	r2, r3
 800366e:	d001      	beq.n	8003674 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e0b8      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d020      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800368c:	4b59      	ldr	r3, [pc, #356]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	4a58      	ldr	r2, [pc, #352]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003696:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0308 	and.w	r3, r3, #8
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036a4:	4b53      	ldr	r3, [pc, #332]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	4a52      	ldr	r2, [pc, #328]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b0:	4b50      	ldr	r3, [pc, #320]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	494d      	ldr	r1, [pc, #308]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d044      	beq.n	8003758 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d107      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d6:	4b47      	ldr	r3, [pc, #284]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d119      	bne.n	8003716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e07f      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d003      	beq.n	80036f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d107      	bne.n	8003706 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f6:	4b3f      	ldr	r3, [pc, #252]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d109      	bne.n	8003716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e06f      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003706:	4b3b      	ldr	r3, [pc, #236]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e067      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003716:	4b37      	ldr	r3, [pc, #220]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f023 0203 	bic.w	r2, r3, #3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	4934      	ldr	r1, [pc, #208]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003724:	4313      	orrs	r3, r2
 8003726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003728:	f7fe fa20 	bl	8001b6c <HAL_GetTick>
 800372c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372e:	e00a      	b.n	8003746 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003730:	f7fe fa1c 	bl	8001b6c <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	f241 3288 	movw	r2, #5000	; 0x1388
 800373e:	4293      	cmp	r3, r2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e04f      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003746:	4b2b      	ldr	r3, [pc, #172]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 020c 	and.w	r2, r3, #12
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	429a      	cmp	r2, r3
 8003756:	d1eb      	bne.n	8003730 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003758:	4b25      	ldr	r3, [pc, #148]	; (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 030f 	and.w	r3, r3, #15
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d20c      	bcs.n	8003780 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003766:	4b22      	ldr	r3, [pc, #136]	; (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800376e:	4b20      	ldr	r3, [pc, #128]	; (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d001      	beq.n	8003780 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e032      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800378c:	4b19      	ldr	r3, [pc, #100]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	4916      	ldr	r1, [pc, #88]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	4313      	orrs	r3, r2
 800379c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d009      	beq.n	80037be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037aa:	4b12      	ldr	r3, [pc, #72]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	490e      	ldr	r1, [pc, #56]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037be:	f000 f821 	bl	8003804 <HAL_RCC_GetSysClockFreq>
 80037c2:	4602      	mov	r2, r0
 80037c4:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	091b      	lsrs	r3, r3, #4
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	490a      	ldr	r1, [pc, #40]	; (80037f8 <HAL_RCC_ClockConfig+0x1c0>)
 80037d0:	5ccb      	ldrb	r3, [r1, r3]
 80037d2:	fa22 f303 	lsr.w	r3, r2, r3
 80037d6:	4a09      	ldr	r2, [pc, #36]	; (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 80037d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037da:	4b09      	ldr	r3, [pc, #36]	; (8003800 <HAL_RCC_ClockConfig+0x1c8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fe f980 	bl	8001ae4 <HAL_InitTick>

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40023c00 	.word	0x40023c00
 80037f4:	40023800 	.word	0x40023800
 80037f8:	08005608 	.word	0x08005608
 80037fc:	20000000 	.word	0x20000000
 8003800:	20000004 	.word	0x20000004

08003804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003808:	b094      	sub	sp, #80	; 0x50
 800380a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	647b      	str	r3, [r7, #68]	; 0x44
 8003810:	2300      	movs	r3, #0
 8003812:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003814:	2300      	movs	r3, #0
 8003816:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800381c:	4b79      	ldr	r3, [pc, #484]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x200>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 030c 	and.w	r3, r3, #12
 8003824:	2b08      	cmp	r3, #8
 8003826:	d00d      	beq.n	8003844 <HAL_RCC_GetSysClockFreq+0x40>
 8003828:	2b08      	cmp	r3, #8
 800382a:	f200 80e1 	bhi.w	80039f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <HAL_RCC_GetSysClockFreq+0x34>
 8003832:	2b04      	cmp	r3, #4
 8003834:	d003      	beq.n	800383e <HAL_RCC_GetSysClockFreq+0x3a>
 8003836:	e0db      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003838:	4b73      	ldr	r3, [pc, #460]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x204>)
 800383a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800383c:	e0db      	b.n	80039f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800383e:	4b73      	ldr	r3, [pc, #460]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x208>)
 8003840:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003842:	e0d8      	b.n	80039f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003844:	4b6f      	ldr	r3, [pc, #444]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800384c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800384e:	4b6d      	ldr	r3, [pc, #436]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d063      	beq.n	8003922 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800385a:	4b6a      	ldr	r3, [pc, #424]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x200>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	099b      	lsrs	r3, r3, #6
 8003860:	2200      	movs	r2, #0
 8003862:	63bb      	str	r3, [r7, #56]	; 0x38
 8003864:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800386c:	633b      	str	r3, [r7, #48]	; 0x30
 800386e:	2300      	movs	r3, #0
 8003870:	637b      	str	r3, [r7, #52]	; 0x34
 8003872:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003876:	4622      	mov	r2, r4
 8003878:	462b      	mov	r3, r5
 800387a:	f04f 0000 	mov.w	r0, #0
 800387e:	f04f 0100 	mov.w	r1, #0
 8003882:	0159      	lsls	r1, r3, #5
 8003884:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003888:	0150      	lsls	r0, r2, #5
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4621      	mov	r1, r4
 8003890:	1a51      	subs	r1, r2, r1
 8003892:	6139      	str	r1, [r7, #16]
 8003894:	4629      	mov	r1, r5
 8003896:	eb63 0301 	sbc.w	r3, r3, r1
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038a8:	4659      	mov	r1, fp
 80038aa:	018b      	lsls	r3, r1, #6
 80038ac:	4651      	mov	r1, sl
 80038ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038b2:	4651      	mov	r1, sl
 80038b4:	018a      	lsls	r2, r1, #6
 80038b6:	4651      	mov	r1, sl
 80038b8:	ebb2 0801 	subs.w	r8, r2, r1
 80038bc:	4659      	mov	r1, fp
 80038be:	eb63 0901 	sbc.w	r9, r3, r1
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038d6:	4690      	mov	r8, r2
 80038d8:	4699      	mov	r9, r3
 80038da:	4623      	mov	r3, r4
 80038dc:	eb18 0303 	adds.w	r3, r8, r3
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	462b      	mov	r3, r5
 80038e4:	eb49 0303 	adc.w	r3, r9, r3
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	f04f 0200 	mov.w	r2, #0
 80038ee:	f04f 0300 	mov.w	r3, #0
 80038f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038f6:	4629      	mov	r1, r5
 80038f8:	024b      	lsls	r3, r1, #9
 80038fa:	4621      	mov	r1, r4
 80038fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003900:	4621      	mov	r1, r4
 8003902:	024a      	lsls	r2, r1, #9
 8003904:	4610      	mov	r0, r2
 8003906:	4619      	mov	r1, r3
 8003908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800390a:	2200      	movs	r2, #0
 800390c:	62bb      	str	r3, [r7, #40]	; 0x28
 800390e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003910:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003914:	f7fd f950 	bl	8000bb8 <__aeabi_uldivmod>
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	4613      	mov	r3, r2
 800391e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003920:	e058      	b.n	80039d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003922:	4b38      	ldr	r3, [pc, #224]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	099b      	lsrs	r3, r3, #6
 8003928:	2200      	movs	r2, #0
 800392a:	4618      	mov	r0, r3
 800392c:	4611      	mov	r1, r2
 800392e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003932:	623b      	str	r3, [r7, #32]
 8003934:	2300      	movs	r3, #0
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
 8003938:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800393c:	4642      	mov	r2, r8
 800393e:	464b      	mov	r3, r9
 8003940:	f04f 0000 	mov.w	r0, #0
 8003944:	f04f 0100 	mov.w	r1, #0
 8003948:	0159      	lsls	r1, r3, #5
 800394a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800394e:	0150      	lsls	r0, r2, #5
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	4641      	mov	r1, r8
 8003956:	ebb2 0a01 	subs.w	sl, r2, r1
 800395a:	4649      	mov	r1, r9
 800395c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800396c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003970:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003974:	ebb2 040a 	subs.w	r4, r2, sl
 8003978:	eb63 050b 	sbc.w	r5, r3, fp
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	00eb      	lsls	r3, r5, #3
 8003986:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800398a:	00e2      	lsls	r2, r4, #3
 800398c:	4614      	mov	r4, r2
 800398e:	461d      	mov	r5, r3
 8003990:	4643      	mov	r3, r8
 8003992:	18e3      	adds	r3, r4, r3
 8003994:	603b      	str	r3, [r7, #0]
 8003996:	464b      	mov	r3, r9
 8003998:	eb45 0303 	adc.w	r3, r5, r3
 800399c:	607b      	str	r3, [r7, #4]
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	f04f 0300 	mov.w	r3, #0
 80039a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039aa:	4629      	mov	r1, r5
 80039ac:	028b      	lsls	r3, r1, #10
 80039ae:	4621      	mov	r1, r4
 80039b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039b4:	4621      	mov	r1, r4
 80039b6:	028a      	lsls	r2, r1, #10
 80039b8:	4610      	mov	r0, r2
 80039ba:	4619      	mov	r1, r3
 80039bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039be:	2200      	movs	r2, #0
 80039c0:	61bb      	str	r3, [r7, #24]
 80039c2:	61fa      	str	r2, [r7, #28]
 80039c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039c8:	f7fd f8f6 	bl	8000bb8 <__aeabi_uldivmod>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4613      	mov	r3, r2
 80039d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039d4:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x200>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	0c1b      	lsrs	r3, r3, #16
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	3301      	adds	r3, #1
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80039e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039ee:	e002      	b.n	80039f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039f0:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x204>)
 80039f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3750      	adds	r7, #80	; 0x50
 80039fc:	46bd      	mov	sp, r7
 80039fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a02:	bf00      	nop
 8003a04:	40023800 	.word	0x40023800
 8003a08:	00f42400 	.word	0x00f42400
 8003a0c:	007a1200 	.word	0x007a1200

08003a10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a14:	4b03      	ldr	r3, [pc, #12]	; (8003a24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a16:	681b      	ldr	r3, [r3, #0]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	20000000 	.word	0x20000000

08003a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a2c:	f7ff fff0 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a30:	4602      	mov	r2, r0
 8003a32:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	0a9b      	lsrs	r3, r3, #10
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	4903      	ldr	r1, [pc, #12]	; (8003a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a3e:	5ccb      	ldrb	r3, [r1, r3]
 8003a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	08005618 	.word	0x08005618

08003a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a54:	f7ff ffdc 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	0b5b      	lsrs	r3, r3, #13
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	4903      	ldr	r1, [pc, #12]	; (8003a74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a66:	5ccb      	ldrb	r3, [r1, r3]
 8003a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40023800 	.word	0x40023800
 8003a74:	08005618 	.word	0x08005618

08003a78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e042      	b.n	8003b10 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fd fec0 	bl	8001824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2224      	movs	r2, #36	; 0x24
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f973 	bl	8003da8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	691a      	ldr	r2, [r3, #16]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ad0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695a      	ldr	r2, [r3, #20]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ae0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68da      	ldr	r2, [r3, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003af0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08a      	sub	sp, #40	; 0x28
 8003b1c:	af02      	add	r7, sp, #8
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	603b      	str	r3, [r7, #0]
 8003b24:	4613      	mov	r3, r2
 8003b26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	d175      	bne.n	8003c24 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d002      	beq.n	8003b44 <HAL_UART_Transmit+0x2c>
 8003b3e:	88fb      	ldrh	r3, [r7, #6]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e06e      	b.n	8003c26 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2221      	movs	r2, #33	; 0x21
 8003b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b56:	f7fe f809 	bl	8001b6c <HAL_GetTick>
 8003b5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	88fa      	ldrh	r2, [r7, #6]
 8003b60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	88fa      	ldrh	r2, [r7, #6]
 8003b66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b70:	d108      	bne.n	8003b84 <HAL_UART_Transmit+0x6c>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d104      	bne.n	8003b84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	61bb      	str	r3, [r7, #24]
 8003b82:	e003      	b.n	8003b8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b8c:	e02e      	b.n	8003bec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2200      	movs	r2, #0
 8003b96:	2180      	movs	r1, #128	; 0x80
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 f848 	bl	8003c2e <UART_WaitOnFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e03a      	b.n	8003c26 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10b      	bne.n	8003bce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	3302      	adds	r3, #2
 8003bca:	61bb      	str	r3, [r7, #24]
 8003bcc:	e007      	b.n	8003bde <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	781a      	ldrb	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1cb      	bne.n	8003b8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	2140      	movs	r1, #64	; 0x40
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 f814 	bl	8003c2e <UART_WaitOnFlagUntilTimeout>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d005      	beq.n	8003c18 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e006      	b.n	8003c26 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	e000      	b.n	8003c26 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c24:	2302      	movs	r3, #2
  }
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3720      	adds	r7, #32
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b086      	sub	sp, #24
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	603b      	str	r3, [r7, #0]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c3e:	e03b      	b.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c46:	d037      	beq.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c48:	f7fd ff90 	bl	8001b6c <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	6a3a      	ldr	r2, [r7, #32]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d302      	bcc.n	8003c5e <UART_WaitOnFlagUntilTimeout+0x30>
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e03a      	b.n	8003cd8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d023      	beq.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b80      	cmp	r3, #128	; 0x80
 8003c74:	d020      	beq.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2b40      	cmp	r3, #64	; 0x40
 8003c7a:	d01d      	beq.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d116      	bne.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	617b      	str	r3, [r7, #20]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	617b      	str	r3, [r7, #20]
 8003c9e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 f81d 	bl	8003ce0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2208      	movs	r2, #8
 8003caa:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e00f      	b.n	8003cd8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	bf0c      	ite	eq
 8003cc8:	2301      	moveq	r3, #1
 8003cca:	2300      	movne	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	79fb      	ldrb	r3, [r7, #7]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d0b4      	beq.n	8003c40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b095      	sub	sp, #84	; 0x54
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	330c      	adds	r3, #12
 8003cee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf2:	e853 3f00 	ldrex	r3, [r3]
 8003cf6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	330c      	adds	r3, #12
 8003d06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d08:	643a      	str	r2, [r7, #64]	; 0x40
 8003d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d10:	e841 2300 	strex	r3, r2, [r1]
 8003d14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1e5      	bne.n	8003ce8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3314      	adds	r3, #20
 8003d22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	e853 3f00 	ldrex	r3, [r3]
 8003d2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f023 0301 	bic.w	r3, r3, #1
 8003d32:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	3314      	adds	r3, #20
 8003d3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d44:	e841 2300 	strex	r3, r2, [r1]
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1e5      	bne.n	8003d1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d119      	bne.n	8003d8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	330c      	adds	r3, #12
 8003d5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	e853 3f00 	ldrex	r3, [r3]
 8003d66:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f023 0310 	bic.w	r3, r3, #16
 8003d6e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	330c      	adds	r3, #12
 8003d76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d78:	61ba      	str	r2, [r7, #24]
 8003d7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7c:	6979      	ldr	r1, [r7, #20]
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	e841 2300 	strex	r3, r2, [r1]
 8003d84:	613b      	str	r3, [r7, #16]
   return(result);
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1e5      	bne.n	8003d58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d9a:	bf00      	nop
 8003d9c:	3754      	adds	r7, #84	; 0x54
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
	...

08003da8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dac:	b0c0      	sub	sp, #256	; 0x100
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc4:	68d9      	ldr	r1, [r3, #12]
 8003dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	ea40 0301 	orr.w	r3, r0, r1
 8003dd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	431a      	orrs	r2, r3
 8003de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	431a      	orrs	r2, r3
 8003de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e00:	f021 010c 	bic.w	r1, r1, #12
 8003e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e0e:	430b      	orrs	r3, r1
 8003e10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e22:	6999      	ldr	r1, [r3, #24]
 8003e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	ea40 0301 	orr.w	r3, r0, r1
 8003e2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	4b8f      	ldr	r3, [pc, #572]	; (8004074 <UART_SetConfig+0x2cc>)
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d005      	beq.n	8003e48 <UART_SetConfig+0xa0>
 8003e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	4b8d      	ldr	r3, [pc, #564]	; (8004078 <UART_SetConfig+0x2d0>)
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d104      	bne.n	8003e52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e48:	f7ff fe02 	bl	8003a50 <HAL_RCC_GetPCLK2Freq>
 8003e4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e50:	e003      	b.n	8003e5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e52:	f7ff fde9 	bl	8003a28 <HAL_RCC_GetPCLK1Freq>
 8003e56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e64:	f040 810c 	bne.w	8004080 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e7a:	4622      	mov	r2, r4
 8003e7c:	462b      	mov	r3, r5
 8003e7e:	1891      	adds	r1, r2, r2
 8003e80:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e82:	415b      	adcs	r3, r3
 8003e84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e8a:	4621      	mov	r1, r4
 8003e8c:	eb12 0801 	adds.w	r8, r2, r1
 8003e90:	4629      	mov	r1, r5
 8003e92:	eb43 0901 	adc.w	r9, r3, r1
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	f04f 0300 	mov.w	r3, #0
 8003e9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ea2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ea6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eaa:	4690      	mov	r8, r2
 8003eac:	4699      	mov	r9, r3
 8003eae:	4623      	mov	r3, r4
 8003eb0:	eb18 0303 	adds.w	r3, r8, r3
 8003eb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003eb8:	462b      	mov	r3, r5
 8003eba:	eb49 0303 	adc.w	r3, r9, r3
 8003ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ece:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ed2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	18db      	adds	r3, r3, r3
 8003eda:	653b      	str	r3, [r7, #80]	; 0x50
 8003edc:	4613      	mov	r3, r2
 8003ede:	eb42 0303 	adc.w	r3, r2, r3
 8003ee2:	657b      	str	r3, [r7, #84]	; 0x54
 8003ee4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ee8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003eec:	f7fc fe64 	bl	8000bb8 <__aeabi_uldivmod>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4b61      	ldr	r3, [pc, #388]	; (800407c <UART_SetConfig+0x2d4>)
 8003ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	011c      	lsls	r4, r3, #4
 8003efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f02:	2200      	movs	r2, #0
 8003f04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f08:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003f0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003f10:	4642      	mov	r2, r8
 8003f12:	464b      	mov	r3, r9
 8003f14:	1891      	adds	r1, r2, r2
 8003f16:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f18:	415b      	adcs	r3, r3
 8003f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f20:	4641      	mov	r1, r8
 8003f22:	eb12 0a01 	adds.w	sl, r2, r1
 8003f26:	4649      	mov	r1, r9
 8003f28:	eb43 0b01 	adc.w	fp, r3, r1
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	f04f 0300 	mov.w	r3, #0
 8003f34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f40:	4692      	mov	sl, r2
 8003f42:	469b      	mov	fp, r3
 8003f44:	4643      	mov	r3, r8
 8003f46:	eb1a 0303 	adds.w	r3, sl, r3
 8003f4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f4e:	464b      	mov	r3, r9
 8003f50:	eb4b 0303 	adc.w	r3, fp, r3
 8003f54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f64:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	18db      	adds	r3, r3, r3
 8003f70:	643b      	str	r3, [r7, #64]	; 0x40
 8003f72:	4613      	mov	r3, r2
 8003f74:	eb42 0303 	adc.w	r3, r2, r3
 8003f78:	647b      	str	r3, [r7, #68]	; 0x44
 8003f7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f82:	f7fc fe19 	bl	8000bb8 <__aeabi_uldivmod>
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	4b3b      	ldr	r3, [pc, #236]	; (800407c <UART_SetConfig+0x2d4>)
 8003f8e:	fba3 2301 	umull	r2, r3, r3, r1
 8003f92:	095b      	lsrs	r3, r3, #5
 8003f94:	2264      	movs	r2, #100	; 0x64
 8003f96:	fb02 f303 	mul.w	r3, r2, r3
 8003f9a:	1acb      	subs	r3, r1, r3
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003fa2:	4b36      	ldr	r3, [pc, #216]	; (800407c <UART_SetConfig+0x2d4>)
 8003fa4:	fba3 2302 	umull	r2, r3, r3, r2
 8003fa8:	095b      	lsrs	r3, r3, #5
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fb0:	441c      	add	r4, r3
 8003fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fbc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003fc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003fc4:	4642      	mov	r2, r8
 8003fc6:	464b      	mov	r3, r9
 8003fc8:	1891      	adds	r1, r2, r2
 8003fca:	63b9      	str	r1, [r7, #56]	; 0x38
 8003fcc:	415b      	adcs	r3, r3
 8003fce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003fd4:	4641      	mov	r1, r8
 8003fd6:	1851      	adds	r1, r2, r1
 8003fd8:	6339      	str	r1, [r7, #48]	; 0x30
 8003fda:	4649      	mov	r1, r9
 8003fdc:	414b      	adcs	r3, r1
 8003fde:	637b      	str	r3, [r7, #52]	; 0x34
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003fec:	4659      	mov	r1, fp
 8003fee:	00cb      	lsls	r3, r1, #3
 8003ff0:	4651      	mov	r1, sl
 8003ff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ff6:	4651      	mov	r1, sl
 8003ff8:	00ca      	lsls	r2, r1, #3
 8003ffa:	4610      	mov	r0, r2
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4603      	mov	r3, r0
 8004000:	4642      	mov	r2, r8
 8004002:	189b      	adds	r3, r3, r2
 8004004:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004008:	464b      	mov	r3, r9
 800400a:	460a      	mov	r2, r1
 800400c:	eb42 0303 	adc.w	r3, r2, r3
 8004010:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004020:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004024:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004028:	460b      	mov	r3, r1
 800402a:	18db      	adds	r3, r3, r3
 800402c:	62bb      	str	r3, [r7, #40]	; 0x28
 800402e:	4613      	mov	r3, r2
 8004030:	eb42 0303 	adc.w	r3, r2, r3
 8004034:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004036:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800403a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800403e:	f7fc fdbb 	bl	8000bb8 <__aeabi_uldivmod>
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4b0d      	ldr	r3, [pc, #52]	; (800407c <UART_SetConfig+0x2d4>)
 8004048:	fba3 1302 	umull	r1, r3, r3, r2
 800404c:	095b      	lsrs	r3, r3, #5
 800404e:	2164      	movs	r1, #100	; 0x64
 8004050:	fb01 f303 	mul.w	r3, r1, r3
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	3332      	adds	r3, #50	; 0x32
 800405a:	4a08      	ldr	r2, [pc, #32]	; (800407c <UART_SetConfig+0x2d4>)
 800405c:	fba2 2303 	umull	r2, r3, r2, r3
 8004060:	095b      	lsrs	r3, r3, #5
 8004062:	f003 0207 	and.w	r2, r3, #7
 8004066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4422      	add	r2, r4
 800406e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004070:	e106      	b.n	8004280 <UART_SetConfig+0x4d8>
 8004072:	bf00      	nop
 8004074:	40011000 	.word	0x40011000
 8004078:	40011400 	.word	0x40011400
 800407c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004080:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004084:	2200      	movs	r2, #0
 8004086:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800408a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800408e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004092:	4642      	mov	r2, r8
 8004094:	464b      	mov	r3, r9
 8004096:	1891      	adds	r1, r2, r2
 8004098:	6239      	str	r1, [r7, #32]
 800409a:	415b      	adcs	r3, r3
 800409c:	627b      	str	r3, [r7, #36]	; 0x24
 800409e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040a2:	4641      	mov	r1, r8
 80040a4:	1854      	adds	r4, r2, r1
 80040a6:	4649      	mov	r1, r9
 80040a8:	eb43 0501 	adc.w	r5, r3, r1
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	00eb      	lsls	r3, r5, #3
 80040b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040ba:	00e2      	lsls	r2, r4, #3
 80040bc:	4614      	mov	r4, r2
 80040be:	461d      	mov	r5, r3
 80040c0:	4643      	mov	r3, r8
 80040c2:	18e3      	adds	r3, r4, r3
 80040c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040c8:	464b      	mov	r3, r9
 80040ca:	eb45 0303 	adc.w	r3, r5, r3
 80040ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040e2:	f04f 0200 	mov.w	r2, #0
 80040e6:	f04f 0300 	mov.w	r3, #0
 80040ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80040ee:	4629      	mov	r1, r5
 80040f0:	008b      	lsls	r3, r1, #2
 80040f2:	4621      	mov	r1, r4
 80040f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040f8:	4621      	mov	r1, r4
 80040fa:	008a      	lsls	r2, r1, #2
 80040fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004100:	f7fc fd5a 	bl	8000bb8 <__aeabi_uldivmod>
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	4b60      	ldr	r3, [pc, #384]	; (800428c <UART_SetConfig+0x4e4>)
 800410a:	fba3 2302 	umull	r2, r3, r3, r2
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	011c      	lsls	r4, r3, #4
 8004112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004116:	2200      	movs	r2, #0
 8004118:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800411c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004120:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004124:	4642      	mov	r2, r8
 8004126:	464b      	mov	r3, r9
 8004128:	1891      	adds	r1, r2, r2
 800412a:	61b9      	str	r1, [r7, #24]
 800412c:	415b      	adcs	r3, r3
 800412e:	61fb      	str	r3, [r7, #28]
 8004130:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004134:	4641      	mov	r1, r8
 8004136:	1851      	adds	r1, r2, r1
 8004138:	6139      	str	r1, [r7, #16]
 800413a:	4649      	mov	r1, r9
 800413c:	414b      	adcs	r3, r1
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	f04f 0300 	mov.w	r3, #0
 8004148:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800414c:	4659      	mov	r1, fp
 800414e:	00cb      	lsls	r3, r1, #3
 8004150:	4651      	mov	r1, sl
 8004152:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004156:	4651      	mov	r1, sl
 8004158:	00ca      	lsls	r2, r1, #3
 800415a:	4610      	mov	r0, r2
 800415c:	4619      	mov	r1, r3
 800415e:	4603      	mov	r3, r0
 8004160:	4642      	mov	r2, r8
 8004162:	189b      	adds	r3, r3, r2
 8004164:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004168:	464b      	mov	r3, r9
 800416a:	460a      	mov	r2, r1
 800416c:	eb42 0303 	adc.w	r3, r2, r3
 8004170:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	67bb      	str	r3, [r7, #120]	; 0x78
 800417e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800418c:	4649      	mov	r1, r9
 800418e:	008b      	lsls	r3, r1, #2
 8004190:	4641      	mov	r1, r8
 8004192:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004196:	4641      	mov	r1, r8
 8004198:	008a      	lsls	r2, r1, #2
 800419a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800419e:	f7fc fd0b 	bl	8000bb8 <__aeabi_uldivmod>
 80041a2:	4602      	mov	r2, r0
 80041a4:	460b      	mov	r3, r1
 80041a6:	4611      	mov	r1, r2
 80041a8:	4b38      	ldr	r3, [pc, #224]	; (800428c <UART_SetConfig+0x4e4>)
 80041aa:	fba3 2301 	umull	r2, r3, r3, r1
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	2264      	movs	r2, #100	; 0x64
 80041b2:	fb02 f303 	mul.w	r3, r2, r3
 80041b6:	1acb      	subs	r3, r1, r3
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	3332      	adds	r3, #50	; 0x32
 80041bc:	4a33      	ldr	r2, [pc, #204]	; (800428c <UART_SetConfig+0x4e4>)
 80041be:	fba2 2303 	umull	r2, r3, r2, r3
 80041c2:	095b      	lsrs	r3, r3, #5
 80041c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041c8:	441c      	add	r4, r3
 80041ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041ce:	2200      	movs	r2, #0
 80041d0:	673b      	str	r3, [r7, #112]	; 0x70
 80041d2:	677a      	str	r2, [r7, #116]	; 0x74
 80041d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80041d8:	4642      	mov	r2, r8
 80041da:	464b      	mov	r3, r9
 80041dc:	1891      	adds	r1, r2, r2
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	415b      	adcs	r3, r3
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041e8:	4641      	mov	r1, r8
 80041ea:	1851      	adds	r1, r2, r1
 80041ec:	6039      	str	r1, [r7, #0]
 80041ee:	4649      	mov	r1, r9
 80041f0:	414b      	adcs	r3, r1
 80041f2:	607b      	str	r3, [r7, #4]
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	f04f 0300 	mov.w	r3, #0
 80041fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004200:	4659      	mov	r1, fp
 8004202:	00cb      	lsls	r3, r1, #3
 8004204:	4651      	mov	r1, sl
 8004206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800420a:	4651      	mov	r1, sl
 800420c:	00ca      	lsls	r2, r1, #3
 800420e:	4610      	mov	r0, r2
 8004210:	4619      	mov	r1, r3
 8004212:	4603      	mov	r3, r0
 8004214:	4642      	mov	r2, r8
 8004216:	189b      	adds	r3, r3, r2
 8004218:	66bb      	str	r3, [r7, #104]	; 0x68
 800421a:	464b      	mov	r3, r9
 800421c:	460a      	mov	r2, r1
 800421e:	eb42 0303 	adc.w	r3, r2, r3
 8004222:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	663b      	str	r3, [r7, #96]	; 0x60
 800422e:	667a      	str	r2, [r7, #100]	; 0x64
 8004230:	f04f 0200 	mov.w	r2, #0
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800423c:	4649      	mov	r1, r9
 800423e:	008b      	lsls	r3, r1, #2
 8004240:	4641      	mov	r1, r8
 8004242:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004246:	4641      	mov	r1, r8
 8004248:	008a      	lsls	r2, r1, #2
 800424a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800424e:	f7fc fcb3 	bl	8000bb8 <__aeabi_uldivmod>
 8004252:	4602      	mov	r2, r0
 8004254:	460b      	mov	r3, r1
 8004256:	4b0d      	ldr	r3, [pc, #52]	; (800428c <UART_SetConfig+0x4e4>)
 8004258:	fba3 1302 	umull	r1, r3, r3, r2
 800425c:	095b      	lsrs	r3, r3, #5
 800425e:	2164      	movs	r1, #100	; 0x64
 8004260:	fb01 f303 	mul.w	r3, r1, r3
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	3332      	adds	r3, #50	; 0x32
 800426a:	4a08      	ldr	r2, [pc, #32]	; (800428c <UART_SetConfig+0x4e4>)
 800426c:	fba2 2303 	umull	r2, r3, r2, r3
 8004270:	095b      	lsrs	r3, r3, #5
 8004272:	f003 020f 	and.w	r2, r3, #15
 8004276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4422      	add	r2, r4
 800427e:	609a      	str	r2, [r3, #8]
}
 8004280:	bf00      	nop
 8004282:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004286:	46bd      	mov	sp, r7
 8004288:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800428c:	51eb851f 	.word	0x51eb851f

08004290 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004290:	b084      	sub	sp, #16
 8004292:	b580      	push	{r7, lr}
 8004294:	b084      	sub	sp, #16
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	f107 001c 	add.w	r0, r7, #28
 800429e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042a2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d123      	bne.n	80042f2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80042be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80042d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d105      	bne.n	80042e6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 faa0 	bl	800482c <USB_CoreReset>
 80042ec:	4603      	mov	r3, r0
 80042ee:	73fb      	strb	r3, [r7, #15]
 80042f0:	e01b      	b.n	800432a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fa94 	bl	800482c <USB_CoreReset>
 8004304:	4603      	mov	r3, r0
 8004306:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004308:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800430c:	2b00      	cmp	r3, #0
 800430e:	d106      	bne.n	800431e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004314:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	639a      	str	r2, [r3, #56]	; 0x38
 800431c:	e005      	b.n	800432a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004322:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800432a:	7fbb      	ldrb	r3, [r7, #30]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d10b      	bne.n	8004348 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f043 0206 	orr.w	r2, r3, #6
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f043 0220 	orr.w	r2, r3, #32
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004348:	7bfb      	ldrb	r3, [r7, #15]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004354:	b004      	add	sp, #16
 8004356:	4770      	bx	lr

08004358 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f023 0201 	bic.w	r2, r3, #1
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	460b      	mov	r3, r1
 8004384:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004396:	78fb      	ldrb	r3, [r7, #3]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d115      	bne.n	80043c8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80043a8:	200a      	movs	r0, #10
 80043aa:	f7fd fbeb 	bl	8001b84 <HAL_Delay>
      ms += 10U;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	330a      	adds	r3, #10
 80043b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fa2b 	bl	8004810 <USB_GetMode>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d01e      	beq.n	80043fe <USB_SetCurrentMode+0x84>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2bc7      	cmp	r3, #199	; 0xc7
 80043c4:	d9f0      	bls.n	80043a8 <USB_SetCurrentMode+0x2e>
 80043c6:	e01a      	b.n	80043fe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80043c8:	78fb      	ldrb	r3, [r7, #3]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d115      	bne.n	80043fa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80043da:	200a      	movs	r0, #10
 80043dc:	f7fd fbd2 	bl	8001b84 <HAL_Delay>
      ms += 10U;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	330a      	adds	r3, #10
 80043e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 fa12 	bl	8004810 <USB_GetMode>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d005      	beq.n	80043fe <USB_SetCurrentMode+0x84>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2bc7      	cmp	r3, #199	; 0xc7
 80043f6:	d9f0      	bls.n	80043da <USB_SetCurrentMode+0x60>
 80043f8:	e001      	b.n	80043fe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e005      	b.n	800440a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2bc8      	cmp	r3, #200	; 0xc8
 8004402:	d101      	bne.n	8004408 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e000      	b.n	800440a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
	...

08004414 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004414:	b084      	sub	sp, #16
 8004416:	b580      	push	{r7, lr}
 8004418:	b086      	sub	sp, #24
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
 800441e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004422:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800442e:	2300      	movs	r3, #0
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	e009      	b.n	8004448 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	3340      	adds	r3, #64	; 0x40
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	2200      	movs	r2, #0
 8004440:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	3301      	adds	r3, #1
 8004446:	613b      	str	r3, [r7, #16]
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	2b0e      	cmp	r3, #14
 800444c:	d9f2      	bls.n	8004434 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800444e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004452:	2b00      	cmp	r3, #0
 8004454:	d11c      	bne.n	8004490 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004464:	f043 0302 	orr.w	r3, r3, #2
 8004468:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004486:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	639a      	str	r2, [r3, #56]	; 0x38
 800448e:	e00b      	b.n	80044a8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004494:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044ae:	461a      	mov	r2, r3
 80044b0:	2300      	movs	r3, #0
 80044b2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044b4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d10d      	bne.n	80044d8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80044bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d104      	bne.n	80044ce <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80044c4:	2100      	movs	r1, #0
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f968 	bl	800479c <USB_SetDevSpeed>
 80044cc:	e008      	b.n	80044e0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80044ce:	2101      	movs	r1, #1
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f963 	bl	800479c <USB_SetDevSpeed>
 80044d6:	e003      	b.n	80044e0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80044d8:	2103      	movs	r1, #3
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f95e 	bl	800479c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80044e0:	2110      	movs	r1, #16
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f8fa 	bl	80046dc <USB_FlushTxFifo>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f924 	bl	8004740 <USB_FlushRxFifo>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004508:	461a      	mov	r2, r3
 800450a:	2300      	movs	r3, #0
 800450c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004514:	461a      	mov	r2, r3
 8004516:	2300      	movs	r3, #0
 8004518:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004520:	461a      	mov	r2, r3
 8004522:	2300      	movs	r3, #0
 8004524:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004526:	2300      	movs	r3, #0
 8004528:	613b      	str	r3, [r7, #16]
 800452a:	e043      	b.n	80045b4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4413      	add	r3, r2
 8004534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800453e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004542:	d118      	bne.n	8004576 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10a      	bne.n	8004560 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	4413      	add	r3, r2
 8004552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004556:	461a      	mov	r2, r3
 8004558:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	e013      	b.n	8004588 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4413      	add	r3, r2
 8004568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800456c:	461a      	mov	r2, r3
 800456e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004572:	6013      	str	r3, [r2, #0]
 8004574:	e008      	b.n	8004588 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	4413      	add	r3, r2
 800457e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004582:	461a      	mov	r2, r3
 8004584:	2300      	movs	r3, #0
 8004586:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	015a      	lsls	r2, r3, #5
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4413      	add	r3, r2
 8004590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004594:	461a      	mov	r2, r3
 8004596:	2300      	movs	r3, #0
 8004598:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a6:	461a      	mov	r2, r3
 80045a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	3301      	adds	r3, #1
 80045b2:	613b      	str	r3, [r7, #16]
 80045b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80045b8:	461a      	mov	r2, r3
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	4293      	cmp	r3, r2
 80045be:	d3b5      	bcc.n	800452c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045c0:	2300      	movs	r3, #0
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	e043      	b.n	800464e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	015a      	lsls	r2, r3, #5
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045dc:	d118      	bne.n	8004610 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10a      	bne.n	80045fa <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f0:	461a      	mov	r2, r3
 80045f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	e013      	b.n	8004622 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	4413      	add	r3, r2
 8004602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004606:	461a      	mov	r2, r3
 8004608:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800460c:	6013      	str	r3, [r2, #0]
 800460e:	e008      	b.n	8004622 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4413      	add	r3, r2
 8004618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461c:	461a      	mov	r2, r3
 800461e:	2300      	movs	r3, #0
 8004620:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4413      	add	r3, r2
 800462a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800462e:	461a      	mov	r2, r3
 8004630:	2300      	movs	r3, #0
 8004632:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004640:	461a      	mov	r2, r3
 8004642:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004646:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	3301      	adds	r3, #1
 800464c:	613b      	str	r3, [r7, #16]
 800464e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004652:	461a      	mov	r2, r3
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	4293      	cmp	r3, r2
 8004658:	d3b5      	bcc.n	80045c6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800466c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800467a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800467c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004680:	2b00      	cmp	r3, #0
 8004682:	d105      	bne.n	8004690 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	f043 0210 	orr.w	r2, r3, #16
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	699a      	ldr	r2, [r3, #24]
 8004694:	4b10      	ldr	r3, [pc, #64]	; (80046d8 <USB_DevInit+0x2c4>)
 8004696:	4313      	orrs	r3, r2
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800469c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d005      	beq.n	80046b0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	f043 0208 	orr.w	r2, r3, #8
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80046b0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d107      	bne.n	80046c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046c0:	f043 0304 	orr.w	r3, r3, #4
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80046c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046d4:	b004      	add	sp, #16
 80046d6:	4770      	bx	lr
 80046d8:	803c3800 	.word	0x803c3800

080046dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	3301      	adds	r3, #1
 80046ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80046f6:	d901      	bls.n	80046fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e01b      	b.n	8004734 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	2b00      	cmp	r3, #0
 8004702:	daf2      	bge.n	80046ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	019b      	lsls	r3, r3, #6
 800470c:	f043 0220 	orr.w	r2, r3, #32
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	3301      	adds	r3, #1
 8004718:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004720:	d901      	bls.n	8004726 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e006      	b.n	8004734 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	f003 0320 	and.w	r3, r3, #32
 800472e:	2b20      	cmp	r3, #32
 8004730:	d0f0      	beq.n	8004714 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	3301      	adds	r3, #1
 8004750:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004758:	d901      	bls.n	800475e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e018      	b.n	8004790 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	daf2      	bge.n	800474c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004766:	2300      	movs	r3, #0
 8004768:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2210      	movs	r2, #16
 800476e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	3301      	adds	r3, #1
 8004774:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800477c:	d901      	bls.n	8004782 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e006      	b.n	8004790 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	f003 0310 	and.w	r3, r3, #16
 800478a:	2b10      	cmp	r3, #16
 800478c:	d0f0      	beq.n	8004770 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	460b      	mov	r3, r1
 80047a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	78fb      	ldrb	r3, [r7, #3]
 80047b6:	68f9      	ldr	r1, [r7, #12]
 80047b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047bc:	4313      	orrs	r3, r2
 80047be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b085      	sub	sp, #20
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80047e8:	f023 0303 	bic.w	r3, r3, #3
 80047ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047fc:	f043 0302 	orr.w	r3, r3, #2
 8004800:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	f003 0301 	and.w	r3, r3, #1
}
 8004820:	4618      	mov	r0, r3
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	3301      	adds	r3, #1
 800483c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004844:	d901      	bls.n	800484a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e01b      	b.n	8004882 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	2b00      	cmp	r3, #0
 8004850:	daf2      	bge.n	8004838 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004852:	2300      	movs	r3, #0
 8004854:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f043 0201 	orr.w	r2, r3, #1
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	3301      	adds	r3, #1
 8004866:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800486e:	d901      	bls.n	8004874 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e006      	b.n	8004882 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b01      	cmp	r3, #1
 800487e:	d0f0      	beq.n	8004862 <USB_CoreReset+0x36>

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
	...

08004890 <siprintf>:
 8004890:	b40e      	push	{r1, r2, r3}
 8004892:	b500      	push	{lr}
 8004894:	b09c      	sub	sp, #112	; 0x70
 8004896:	ab1d      	add	r3, sp, #116	; 0x74
 8004898:	9002      	str	r0, [sp, #8]
 800489a:	9006      	str	r0, [sp, #24]
 800489c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048a0:	4809      	ldr	r0, [pc, #36]	; (80048c8 <siprintf+0x38>)
 80048a2:	9107      	str	r1, [sp, #28]
 80048a4:	9104      	str	r1, [sp, #16]
 80048a6:	4909      	ldr	r1, [pc, #36]	; (80048cc <siprintf+0x3c>)
 80048a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80048ac:	9105      	str	r1, [sp, #20]
 80048ae:	6800      	ldr	r0, [r0, #0]
 80048b0:	9301      	str	r3, [sp, #4]
 80048b2:	a902      	add	r1, sp, #8
 80048b4:	f000 f992 	bl	8004bdc <_svfiprintf_r>
 80048b8:	9b02      	ldr	r3, [sp, #8]
 80048ba:	2200      	movs	r2, #0
 80048bc:	701a      	strb	r2, [r3, #0]
 80048be:	b01c      	add	sp, #112	; 0x70
 80048c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80048c4:	b003      	add	sp, #12
 80048c6:	4770      	bx	lr
 80048c8:	20000058 	.word	0x20000058
 80048cc:	ffff0208 	.word	0xffff0208

080048d0 <memset>:
 80048d0:	4402      	add	r2, r0
 80048d2:	4603      	mov	r3, r0
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d100      	bne.n	80048da <memset+0xa>
 80048d8:	4770      	bx	lr
 80048da:	f803 1b01 	strb.w	r1, [r3], #1
 80048de:	e7f9      	b.n	80048d4 <memset+0x4>

080048e0 <__errno>:
 80048e0:	4b01      	ldr	r3, [pc, #4]	; (80048e8 <__errno+0x8>)
 80048e2:	6818      	ldr	r0, [r3, #0]
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	20000058 	.word	0x20000058

080048ec <__libc_init_array>:
 80048ec:	b570      	push	{r4, r5, r6, lr}
 80048ee:	4d0d      	ldr	r5, [pc, #52]	; (8004924 <__libc_init_array+0x38>)
 80048f0:	4c0d      	ldr	r4, [pc, #52]	; (8004928 <__libc_init_array+0x3c>)
 80048f2:	1b64      	subs	r4, r4, r5
 80048f4:	10a4      	asrs	r4, r4, #2
 80048f6:	2600      	movs	r6, #0
 80048f8:	42a6      	cmp	r6, r4
 80048fa:	d109      	bne.n	8004910 <__libc_init_array+0x24>
 80048fc:	4d0b      	ldr	r5, [pc, #44]	; (800492c <__libc_init_array+0x40>)
 80048fe:	4c0c      	ldr	r4, [pc, #48]	; (8004930 <__libc_init_array+0x44>)
 8004900:	f000 fe6c 	bl	80055dc <_init>
 8004904:	1b64      	subs	r4, r4, r5
 8004906:	10a4      	asrs	r4, r4, #2
 8004908:	2600      	movs	r6, #0
 800490a:	42a6      	cmp	r6, r4
 800490c:	d105      	bne.n	800491a <__libc_init_array+0x2e>
 800490e:	bd70      	pop	{r4, r5, r6, pc}
 8004910:	f855 3b04 	ldr.w	r3, [r5], #4
 8004914:	4798      	blx	r3
 8004916:	3601      	adds	r6, #1
 8004918:	e7ee      	b.n	80048f8 <__libc_init_array+0xc>
 800491a:	f855 3b04 	ldr.w	r3, [r5], #4
 800491e:	4798      	blx	r3
 8004920:	3601      	adds	r6, #1
 8004922:	e7f2      	b.n	800490a <__libc_init_array+0x1e>
 8004924:	0800565c 	.word	0x0800565c
 8004928:	0800565c 	.word	0x0800565c
 800492c:	0800565c 	.word	0x0800565c
 8004930:	08005660 	.word	0x08005660

08004934 <__retarget_lock_acquire_recursive>:
 8004934:	4770      	bx	lr

08004936 <__retarget_lock_release_recursive>:
 8004936:	4770      	bx	lr

08004938 <_free_r>:
 8004938:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800493a:	2900      	cmp	r1, #0
 800493c:	d044      	beq.n	80049c8 <_free_r+0x90>
 800493e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004942:	9001      	str	r0, [sp, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	f1a1 0404 	sub.w	r4, r1, #4
 800494a:	bfb8      	it	lt
 800494c:	18e4      	addlt	r4, r4, r3
 800494e:	f000 f8df 	bl	8004b10 <__malloc_lock>
 8004952:	4a1e      	ldr	r2, [pc, #120]	; (80049cc <_free_r+0x94>)
 8004954:	9801      	ldr	r0, [sp, #4]
 8004956:	6813      	ldr	r3, [r2, #0]
 8004958:	b933      	cbnz	r3, 8004968 <_free_r+0x30>
 800495a:	6063      	str	r3, [r4, #4]
 800495c:	6014      	str	r4, [r2, #0]
 800495e:	b003      	add	sp, #12
 8004960:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004964:	f000 b8da 	b.w	8004b1c <__malloc_unlock>
 8004968:	42a3      	cmp	r3, r4
 800496a:	d908      	bls.n	800497e <_free_r+0x46>
 800496c:	6825      	ldr	r5, [r4, #0]
 800496e:	1961      	adds	r1, r4, r5
 8004970:	428b      	cmp	r3, r1
 8004972:	bf01      	itttt	eq
 8004974:	6819      	ldreq	r1, [r3, #0]
 8004976:	685b      	ldreq	r3, [r3, #4]
 8004978:	1949      	addeq	r1, r1, r5
 800497a:	6021      	streq	r1, [r4, #0]
 800497c:	e7ed      	b.n	800495a <_free_r+0x22>
 800497e:	461a      	mov	r2, r3
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	b10b      	cbz	r3, 8004988 <_free_r+0x50>
 8004984:	42a3      	cmp	r3, r4
 8004986:	d9fa      	bls.n	800497e <_free_r+0x46>
 8004988:	6811      	ldr	r1, [r2, #0]
 800498a:	1855      	adds	r5, r2, r1
 800498c:	42a5      	cmp	r5, r4
 800498e:	d10b      	bne.n	80049a8 <_free_r+0x70>
 8004990:	6824      	ldr	r4, [r4, #0]
 8004992:	4421      	add	r1, r4
 8004994:	1854      	adds	r4, r2, r1
 8004996:	42a3      	cmp	r3, r4
 8004998:	6011      	str	r1, [r2, #0]
 800499a:	d1e0      	bne.n	800495e <_free_r+0x26>
 800499c:	681c      	ldr	r4, [r3, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	6053      	str	r3, [r2, #4]
 80049a2:	440c      	add	r4, r1
 80049a4:	6014      	str	r4, [r2, #0]
 80049a6:	e7da      	b.n	800495e <_free_r+0x26>
 80049a8:	d902      	bls.n	80049b0 <_free_r+0x78>
 80049aa:	230c      	movs	r3, #12
 80049ac:	6003      	str	r3, [r0, #0]
 80049ae:	e7d6      	b.n	800495e <_free_r+0x26>
 80049b0:	6825      	ldr	r5, [r4, #0]
 80049b2:	1961      	adds	r1, r4, r5
 80049b4:	428b      	cmp	r3, r1
 80049b6:	bf04      	itt	eq
 80049b8:	6819      	ldreq	r1, [r3, #0]
 80049ba:	685b      	ldreq	r3, [r3, #4]
 80049bc:	6063      	str	r3, [r4, #4]
 80049be:	bf04      	itt	eq
 80049c0:	1949      	addeq	r1, r1, r5
 80049c2:	6021      	streq	r1, [r4, #0]
 80049c4:	6054      	str	r4, [r2, #4]
 80049c6:	e7ca      	b.n	800495e <_free_r+0x26>
 80049c8:	b003      	add	sp, #12
 80049ca:	bd30      	pop	{r4, r5, pc}
 80049cc:	20000988 	.word	0x20000988

080049d0 <sbrk_aligned>:
 80049d0:	b570      	push	{r4, r5, r6, lr}
 80049d2:	4e0e      	ldr	r6, [pc, #56]	; (8004a0c <sbrk_aligned+0x3c>)
 80049d4:	460c      	mov	r4, r1
 80049d6:	6831      	ldr	r1, [r6, #0]
 80049d8:	4605      	mov	r5, r0
 80049da:	b911      	cbnz	r1, 80049e2 <sbrk_aligned+0x12>
 80049dc:	f000 fba6 	bl	800512c <_sbrk_r>
 80049e0:	6030      	str	r0, [r6, #0]
 80049e2:	4621      	mov	r1, r4
 80049e4:	4628      	mov	r0, r5
 80049e6:	f000 fba1 	bl	800512c <_sbrk_r>
 80049ea:	1c43      	adds	r3, r0, #1
 80049ec:	d00a      	beq.n	8004a04 <sbrk_aligned+0x34>
 80049ee:	1cc4      	adds	r4, r0, #3
 80049f0:	f024 0403 	bic.w	r4, r4, #3
 80049f4:	42a0      	cmp	r0, r4
 80049f6:	d007      	beq.n	8004a08 <sbrk_aligned+0x38>
 80049f8:	1a21      	subs	r1, r4, r0
 80049fa:	4628      	mov	r0, r5
 80049fc:	f000 fb96 	bl	800512c <_sbrk_r>
 8004a00:	3001      	adds	r0, #1
 8004a02:	d101      	bne.n	8004a08 <sbrk_aligned+0x38>
 8004a04:	f04f 34ff 	mov.w	r4, #4294967295
 8004a08:	4620      	mov	r0, r4
 8004a0a:	bd70      	pop	{r4, r5, r6, pc}
 8004a0c:	2000098c 	.word	0x2000098c

08004a10 <_malloc_r>:
 8004a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a14:	1ccd      	adds	r5, r1, #3
 8004a16:	f025 0503 	bic.w	r5, r5, #3
 8004a1a:	3508      	adds	r5, #8
 8004a1c:	2d0c      	cmp	r5, #12
 8004a1e:	bf38      	it	cc
 8004a20:	250c      	movcc	r5, #12
 8004a22:	2d00      	cmp	r5, #0
 8004a24:	4607      	mov	r7, r0
 8004a26:	db01      	blt.n	8004a2c <_malloc_r+0x1c>
 8004a28:	42a9      	cmp	r1, r5
 8004a2a:	d905      	bls.n	8004a38 <_malloc_r+0x28>
 8004a2c:	230c      	movs	r3, #12
 8004a2e:	603b      	str	r3, [r7, #0]
 8004a30:	2600      	movs	r6, #0
 8004a32:	4630      	mov	r0, r6
 8004a34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004b0c <_malloc_r+0xfc>
 8004a3c:	f000 f868 	bl	8004b10 <__malloc_lock>
 8004a40:	f8d8 3000 	ldr.w	r3, [r8]
 8004a44:	461c      	mov	r4, r3
 8004a46:	bb5c      	cbnz	r4, 8004aa0 <_malloc_r+0x90>
 8004a48:	4629      	mov	r1, r5
 8004a4a:	4638      	mov	r0, r7
 8004a4c:	f7ff ffc0 	bl	80049d0 <sbrk_aligned>
 8004a50:	1c43      	adds	r3, r0, #1
 8004a52:	4604      	mov	r4, r0
 8004a54:	d155      	bne.n	8004b02 <_malloc_r+0xf2>
 8004a56:	f8d8 4000 	ldr.w	r4, [r8]
 8004a5a:	4626      	mov	r6, r4
 8004a5c:	2e00      	cmp	r6, #0
 8004a5e:	d145      	bne.n	8004aec <_malloc_r+0xdc>
 8004a60:	2c00      	cmp	r4, #0
 8004a62:	d048      	beq.n	8004af6 <_malloc_r+0xe6>
 8004a64:	6823      	ldr	r3, [r4, #0]
 8004a66:	4631      	mov	r1, r6
 8004a68:	4638      	mov	r0, r7
 8004a6a:	eb04 0903 	add.w	r9, r4, r3
 8004a6e:	f000 fb5d 	bl	800512c <_sbrk_r>
 8004a72:	4581      	cmp	r9, r0
 8004a74:	d13f      	bne.n	8004af6 <_malloc_r+0xe6>
 8004a76:	6821      	ldr	r1, [r4, #0]
 8004a78:	1a6d      	subs	r5, r5, r1
 8004a7a:	4629      	mov	r1, r5
 8004a7c:	4638      	mov	r0, r7
 8004a7e:	f7ff ffa7 	bl	80049d0 <sbrk_aligned>
 8004a82:	3001      	adds	r0, #1
 8004a84:	d037      	beq.n	8004af6 <_malloc_r+0xe6>
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	442b      	add	r3, r5
 8004a8a:	6023      	str	r3, [r4, #0]
 8004a8c:	f8d8 3000 	ldr.w	r3, [r8]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d038      	beq.n	8004b06 <_malloc_r+0xf6>
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	42a2      	cmp	r2, r4
 8004a98:	d12b      	bne.n	8004af2 <_malloc_r+0xe2>
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	605a      	str	r2, [r3, #4]
 8004a9e:	e00f      	b.n	8004ac0 <_malloc_r+0xb0>
 8004aa0:	6822      	ldr	r2, [r4, #0]
 8004aa2:	1b52      	subs	r2, r2, r5
 8004aa4:	d41f      	bmi.n	8004ae6 <_malloc_r+0xd6>
 8004aa6:	2a0b      	cmp	r2, #11
 8004aa8:	d917      	bls.n	8004ada <_malloc_r+0xca>
 8004aaa:	1961      	adds	r1, r4, r5
 8004aac:	42a3      	cmp	r3, r4
 8004aae:	6025      	str	r5, [r4, #0]
 8004ab0:	bf18      	it	ne
 8004ab2:	6059      	strne	r1, [r3, #4]
 8004ab4:	6863      	ldr	r3, [r4, #4]
 8004ab6:	bf08      	it	eq
 8004ab8:	f8c8 1000 	streq.w	r1, [r8]
 8004abc:	5162      	str	r2, [r4, r5]
 8004abe:	604b      	str	r3, [r1, #4]
 8004ac0:	4638      	mov	r0, r7
 8004ac2:	f104 060b 	add.w	r6, r4, #11
 8004ac6:	f000 f829 	bl	8004b1c <__malloc_unlock>
 8004aca:	f026 0607 	bic.w	r6, r6, #7
 8004ace:	1d23      	adds	r3, r4, #4
 8004ad0:	1af2      	subs	r2, r6, r3
 8004ad2:	d0ae      	beq.n	8004a32 <_malloc_r+0x22>
 8004ad4:	1b9b      	subs	r3, r3, r6
 8004ad6:	50a3      	str	r3, [r4, r2]
 8004ad8:	e7ab      	b.n	8004a32 <_malloc_r+0x22>
 8004ada:	42a3      	cmp	r3, r4
 8004adc:	6862      	ldr	r2, [r4, #4]
 8004ade:	d1dd      	bne.n	8004a9c <_malloc_r+0x8c>
 8004ae0:	f8c8 2000 	str.w	r2, [r8]
 8004ae4:	e7ec      	b.n	8004ac0 <_malloc_r+0xb0>
 8004ae6:	4623      	mov	r3, r4
 8004ae8:	6864      	ldr	r4, [r4, #4]
 8004aea:	e7ac      	b.n	8004a46 <_malloc_r+0x36>
 8004aec:	4634      	mov	r4, r6
 8004aee:	6876      	ldr	r6, [r6, #4]
 8004af0:	e7b4      	b.n	8004a5c <_malloc_r+0x4c>
 8004af2:	4613      	mov	r3, r2
 8004af4:	e7cc      	b.n	8004a90 <_malloc_r+0x80>
 8004af6:	230c      	movs	r3, #12
 8004af8:	603b      	str	r3, [r7, #0]
 8004afa:	4638      	mov	r0, r7
 8004afc:	f000 f80e 	bl	8004b1c <__malloc_unlock>
 8004b00:	e797      	b.n	8004a32 <_malloc_r+0x22>
 8004b02:	6025      	str	r5, [r4, #0]
 8004b04:	e7dc      	b.n	8004ac0 <_malloc_r+0xb0>
 8004b06:	605b      	str	r3, [r3, #4]
 8004b08:	deff      	udf	#255	; 0xff
 8004b0a:	bf00      	nop
 8004b0c:	20000988 	.word	0x20000988

08004b10 <__malloc_lock>:
 8004b10:	4801      	ldr	r0, [pc, #4]	; (8004b18 <__malloc_lock+0x8>)
 8004b12:	f7ff bf0f 	b.w	8004934 <__retarget_lock_acquire_recursive>
 8004b16:	bf00      	nop
 8004b18:	20000984 	.word	0x20000984

08004b1c <__malloc_unlock>:
 8004b1c:	4801      	ldr	r0, [pc, #4]	; (8004b24 <__malloc_unlock+0x8>)
 8004b1e:	f7ff bf0a 	b.w	8004936 <__retarget_lock_release_recursive>
 8004b22:	bf00      	nop
 8004b24:	20000984 	.word	0x20000984

08004b28 <__ssputs_r>:
 8004b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b2c:	688e      	ldr	r6, [r1, #8]
 8004b2e:	461f      	mov	r7, r3
 8004b30:	42be      	cmp	r6, r7
 8004b32:	680b      	ldr	r3, [r1, #0]
 8004b34:	4682      	mov	sl, r0
 8004b36:	460c      	mov	r4, r1
 8004b38:	4690      	mov	r8, r2
 8004b3a:	d82c      	bhi.n	8004b96 <__ssputs_r+0x6e>
 8004b3c:	898a      	ldrh	r2, [r1, #12]
 8004b3e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b42:	d026      	beq.n	8004b92 <__ssputs_r+0x6a>
 8004b44:	6965      	ldr	r5, [r4, #20]
 8004b46:	6909      	ldr	r1, [r1, #16]
 8004b48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b4c:	eba3 0901 	sub.w	r9, r3, r1
 8004b50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b54:	1c7b      	adds	r3, r7, #1
 8004b56:	444b      	add	r3, r9
 8004b58:	106d      	asrs	r5, r5, #1
 8004b5a:	429d      	cmp	r5, r3
 8004b5c:	bf38      	it	cc
 8004b5e:	461d      	movcc	r5, r3
 8004b60:	0553      	lsls	r3, r2, #21
 8004b62:	d527      	bpl.n	8004bb4 <__ssputs_r+0x8c>
 8004b64:	4629      	mov	r1, r5
 8004b66:	f7ff ff53 	bl	8004a10 <_malloc_r>
 8004b6a:	4606      	mov	r6, r0
 8004b6c:	b360      	cbz	r0, 8004bc8 <__ssputs_r+0xa0>
 8004b6e:	6921      	ldr	r1, [r4, #16]
 8004b70:	464a      	mov	r2, r9
 8004b72:	f000 faeb 	bl	800514c <memcpy>
 8004b76:	89a3      	ldrh	r3, [r4, #12]
 8004b78:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b80:	81a3      	strh	r3, [r4, #12]
 8004b82:	6126      	str	r6, [r4, #16]
 8004b84:	6165      	str	r5, [r4, #20]
 8004b86:	444e      	add	r6, r9
 8004b88:	eba5 0509 	sub.w	r5, r5, r9
 8004b8c:	6026      	str	r6, [r4, #0]
 8004b8e:	60a5      	str	r5, [r4, #8]
 8004b90:	463e      	mov	r6, r7
 8004b92:	42be      	cmp	r6, r7
 8004b94:	d900      	bls.n	8004b98 <__ssputs_r+0x70>
 8004b96:	463e      	mov	r6, r7
 8004b98:	6820      	ldr	r0, [r4, #0]
 8004b9a:	4632      	mov	r2, r6
 8004b9c:	4641      	mov	r1, r8
 8004b9e:	f000 faab 	bl	80050f8 <memmove>
 8004ba2:	68a3      	ldr	r3, [r4, #8]
 8004ba4:	1b9b      	subs	r3, r3, r6
 8004ba6:	60a3      	str	r3, [r4, #8]
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	4433      	add	r3, r6
 8004bac:	6023      	str	r3, [r4, #0]
 8004bae:	2000      	movs	r0, #0
 8004bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb4:	462a      	mov	r2, r5
 8004bb6:	f000 fad7 	bl	8005168 <_realloc_r>
 8004bba:	4606      	mov	r6, r0
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	d1e0      	bne.n	8004b82 <__ssputs_r+0x5a>
 8004bc0:	6921      	ldr	r1, [r4, #16]
 8004bc2:	4650      	mov	r0, sl
 8004bc4:	f7ff feb8 	bl	8004938 <_free_r>
 8004bc8:	230c      	movs	r3, #12
 8004bca:	f8ca 3000 	str.w	r3, [sl]
 8004bce:	89a3      	ldrh	r3, [r4, #12]
 8004bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bd4:	81a3      	strh	r3, [r4, #12]
 8004bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bda:	e7e9      	b.n	8004bb0 <__ssputs_r+0x88>

08004bdc <_svfiprintf_r>:
 8004bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be0:	4698      	mov	r8, r3
 8004be2:	898b      	ldrh	r3, [r1, #12]
 8004be4:	061b      	lsls	r3, r3, #24
 8004be6:	b09d      	sub	sp, #116	; 0x74
 8004be8:	4607      	mov	r7, r0
 8004bea:	460d      	mov	r5, r1
 8004bec:	4614      	mov	r4, r2
 8004bee:	d50e      	bpl.n	8004c0e <_svfiprintf_r+0x32>
 8004bf0:	690b      	ldr	r3, [r1, #16]
 8004bf2:	b963      	cbnz	r3, 8004c0e <_svfiprintf_r+0x32>
 8004bf4:	2140      	movs	r1, #64	; 0x40
 8004bf6:	f7ff ff0b 	bl	8004a10 <_malloc_r>
 8004bfa:	6028      	str	r0, [r5, #0]
 8004bfc:	6128      	str	r0, [r5, #16]
 8004bfe:	b920      	cbnz	r0, 8004c0a <_svfiprintf_r+0x2e>
 8004c00:	230c      	movs	r3, #12
 8004c02:	603b      	str	r3, [r7, #0]
 8004c04:	f04f 30ff 	mov.w	r0, #4294967295
 8004c08:	e0d0      	b.n	8004dac <_svfiprintf_r+0x1d0>
 8004c0a:	2340      	movs	r3, #64	; 0x40
 8004c0c:	616b      	str	r3, [r5, #20]
 8004c0e:	2300      	movs	r3, #0
 8004c10:	9309      	str	r3, [sp, #36]	; 0x24
 8004c12:	2320      	movs	r3, #32
 8004c14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c18:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c1c:	2330      	movs	r3, #48	; 0x30
 8004c1e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004dc4 <_svfiprintf_r+0x1e8>
 8004c22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c26:	f04f 0901 	mov.w	r9, #1
 8004c2a:	4623      	mov	r3, r4
 8004c2c:	469a      	mov	sl, r3
 8004c2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c32:	b10a      	cbz	r2, 8004c38 <_svfiprintf_r+0x5c>
 8004c34:	2a25      	cmp	r2, #37	; 0x25
 8004c36:	d1f9      	bne.n	8004c2c <_svfiprintf_r+0x50>
 8004c38:	ebba 0b04 	subs.w	fp, sl, r4
 8004c3c:	d00b      	beq.n	8004c56 <_svfiprintf_r+0x7a>
 8004c3e:	465b      	mov	r3, fp
 8004c40:	4622      	mov	r2, r4
 8004c42:	4629      	mov	r1, r5
 8004c44:	4638      	mov	r0, r7
 8004c46:	f7ff ff6f 	bl	8004b28 <__ssputs_r>
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	f000 80a9 	beq.w	8004da2 <_svfiprintf_r+0x1c6>
 8004c50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c52:	445a      	add	r2, fp
 8004c54:	9209      	str	r2, [sp, #36]	; 0x24
 8004c56:	f89a 3000 	ldrb.w	r3, [sl]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 80a1 	beq.w	8004da2 <_svfiprintf_r+0x1c6>
 8004c60:	2300      	movs	r3, #0
 8004c62:	f04f 32ff 	mov.w	r2, #4294967295
 8004c66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c6a:	f10a 0a01 	add.w	sl, sl, #1
 8004c6e:	9304      	str	r3, [sp, #16]
 8004c70:	9307      	str	r3, [sp, #28]
 8004c72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c76:	931a      	str	r3, [sp, #104]	; 0x68
 8004c78:	4654      	mov	r4, sl
 8004c7a:	2205      	movs	r2, #5
 8004c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c80:	4850      	ldr	r0, [pc, #320]	; (8004dc4 <_svfiprintf_r+0x1e8>)
 8004c82:	f7fb fabd 	bl	8000200 <memchr>
 8004c86:	9a04      	ldr	r2, [sp, #16]
 8004c88:	b9d8      	cbnz	r0, 8004cc2 <_svfiprintf_r+0xe6>
 8004c8a:	06d0      	lsls	r0, r2, #27
 8004c8c:	bf44      	itt	mi
 8004c8e:	2320      	movmi	r3, #32
 8004c90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c94:	0711      	lsls	r1, r2, #28
 8004c96:	bf44      	itt	mi
 8004c98:	232b      	movmi	r3, #43	; 0x2b
 8004c9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c9e:	f89a 3000 	ldrb.w	r3, [sl]
 8004ca2:	2b2a      	cmp	r3, #42	; 0x2a
 8004ca4:	d015      	beq.n	8004cd2 <_svfiprintf_r+0xf6>
 8004ca6:	9a07      	ldr	r2, [sp, #28]
 8004ca8:	4654      	mov	r4, sl
 8004caa:	2000      	movs	r0, #0
 8004cac:	f04f 0c0a 	mov.w	ip, #10
 8004cb0:	4621      	mov	r1, r4
 8004cb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cb6:	3b30      	subs	r3, #48	; 0x30
 8004cb8:	2b09      	cmp	r3, #9
 8004cba:	d94d      	bls.n	8004d58 <_svfiprintf_r+0x17c>
 8004cbc:	b1b0      	cbz	r0, 8004cec <_svfiprintf_r+0x110>
 8004cbe:	9207      	str	r2, [sp, #28]
 8004cc0:	e014      	b.n	8004cec <_svfiprintf_r+0x110>
 8004cc2:	eba0 0308 	sub.w	r3, r0, r8
 8004cc6:	fa09 f303 	lsl.w	r3, r9, r3
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	9304      	str	r3, [sp, #16]
 8004cce:	46a2      	mov	sl, r4
 8004cd0:	e7d2      	b.n	8004c78 <_svfiprintf_r+0x9c>
 8004cd2:	9b03      	ldr	r3, [sp, #12]
 8004cd4:	1d19      	adds	r1, r3, #4
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	9103      	str	r1, [sp, #12]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	bfbb      	ittet	lt
 8004cde:	425b      	neglt	r3, r3
 8004ce0:	f042 0202 	orrlt.w	r2, r2, #2
 8004ce4:	9307      	strge	r3, [sp, #28]
 8004ce6:	9307      	strlt	r3, [sp, #28]
 8004ce8:	bfb8      	it	lt
 8004cea:	9204      	strlt	r2, [sp, #16]
 8004cec:	7823      	ldrb	r3, [r4, #0]
 8004cee:	2b2e      	cmp	r3, #46	; 0x2e
 8004cf0:	d10c      	bne.n	8004d0c <_svfiprintf_r+0x130>
 8004cf2:	7863      	ldrb	r3, [r4, #1]
 8004cf4:	2b2a      	cmp	r3, #42	; 0x2a
 8004cf6:	d134      	bne.n	8004d62 <_svfiprintf_r+0x186>
 8004cf8:	9b03      	ldr	r3, [sp, #12]
 8004cfa:	1d1a      	adds	r2, r3, #4
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	9203      	str	r2, [sp, #12]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	bfb8      	it	lt
 8004d04:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d08:	3402      	adds	r4, #2
 8004d0a:	9305      	str	r3, [sp, #20]
 8004d0c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004dd4 <_svfiprintf_r+0x1f8>
 8004d10:	7821      	ldrb	r1, [r4, #0]
 8004d12:	2203      	movs	r2, #3
 8004d14:	4650      	mov	r0, sl
 8004d16:	f7fb fa73 	bl	8000200 <memchr>
 8004d1a:	b138      	cbz	r0, 8004d2c <_svfiprintf_r+0x150>
 8004d1c:	9b04      	ldr	r3, [sp, #16]
 8004d1e:	eba0 000a 	sub.w	r0, r0, sl
 8004d22:	2240      	movs	r2, #64	; 0x40
 8004d24:	4082      	lsls	r2, r0
 8004d26:	4313      	orrs	r3, r2
 8004d28:	3401      	adds	r4, #1
 8004d2a:	9304      	str	r3, [sp, #16]
 8004d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d30:	4825      	ldr	r0, [pc, #148]	; (8004dc8 <_svfiprintf_r+0x1ec>)
 8004d32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d36:	2206      	movs	r2, #6
 8004d38:	f7fb fa62 	bl	8000200 <memchr>
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	d038      	beq.n	8004db2 <_svfiprintf_r+0x1d6>
 8004d40:	4b22      	ldr	r3, [pc, #136]	; (8004dcc <_svfiprintf_r+0x1f0>)
 8004d42:	bb1b      	cbnz	r3, 8004d8c <_svfiprintf_r+0x1b0>
 8004d44:	9b03      	ldr	r3, [sp, #12]
 8004d46:	3307      	adds	r3, #7
 8004d48:	f023 0307 	bic.w	r3, r3, #7
 8004d4c:	3308      	adds	r3, #8
 8004d4e:	9303      	str	r3, [sp, #12]
 8004d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d52:	4433      	add	r3, r6
 8004d54:	9309      	str	r3, [sp, #36]	; 0x24
 8004d56:	e768      	b.n	8004c2a <_svfiprintf_r+0x4e>
 8004d58:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d5c:	460c      	mov	r4, r1
 8004d5e:	2001      	movs	r0, #1
 8004d60:	e7a6      	b.n	8004cb0 <_svfiprintf_r+0xd4>
 8004d62:	2300      	movs	r3, #0
 8004d64:	3401      	adds	r4, #1
 8004d66:	9305      	str	r3, [sp, #20]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	f04f 0c0a 	mov.w	ip, #10
 8004d6e:	4620      	mov	r0, r4
 8004d70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d74:	3a30      	subs	r2, #48	; 0x30
 8004d76:	2a09      	cmp	r2, #9
 8004d78:	d903      	bls.n	8004d82 <_svfiprintf_r+0x1a6>
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0c6      	beq.n	8004d0c <_svfiprintf_r+0x130>
 8004d7e:	9105      	str	r1, [sp, #20]
 8004d80:	e7c4      	b.n	8004d0c <_svfiprintf_r+0x130>
 8004d82:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d86:	4604      	mov	r4, r0
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e7f0      	b.n	8004d6e <_svfiprintf_r+0x192>
 8004d8c:	ab03      	add	r3, sp, #12
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	462a      	mov	r2, r5
 8004d92:	4b0f      	ldr	r3, [pc, #60]	; (8004dd0 <_svfiprintf_r+0x1f4>)
 8004d94:	a904      	add	r1, sp, #16
 8004d96:	4638      	mov	r0, r7
 8004d98:	f3af 8000 	nop.w
 8004d9c:	1c42      	adds	r2, r0, #1
 8004d9e:	4606      	mov	r6, r0
 8004da0:	d1d6      	bne.n	8004d50 <_svfiprintf_r+0x174>
 8004da2:	89ab      	ldrh	r3, [r5, #12]
 8004da4:	065b      	lsls	r3, r3, #25
 8004da6:	f53f af2d 	bmi.w	8004c04 <_svfiprintf_r+0x28>
 8004daa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004dac:	b01d      	add	sp, #116	; 0x74
 8004dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db2:	ab03      	add	r3, sp, #12
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	462a      	mov	r2, r5
 8004db8:	4b05      	ldr	r3, [pc, #20]	; (8004dd0 <_svfiprintf_r+0x1f4>)
 8004dba:	a904      	add	r1, sp, #16
 8004dbc:	4638      	mov	r0, r7
 8004dbe:	f000 f879 	bl	8004eb4 <_printf_i>
 8004dc2:	e7eb      	b.n	8004d9c <_svfiprintf_r+0x1c0>
 8004dc4:	08005620 	.word	0x08005620
 8004dc8:	0800562a 	.word	0x0800562a
 8004dcc:	00000000 	.word	0x00000000
 8004dd0:	08004b29 	.word	0x08004b29
 8004dd4:	08005626 	.word	0x08005626

08004dd8 <_printf_common>:
 8004dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ddc:	4616      	mov	r6, r2
 8004dde:	4699      	mov	r9, r3
 8004de0:	688a      	ldr	r2, [r1, #8]
 8004de2:	690b      	ldr	r3, [r1, #16]
 8004de4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004de8:	4293      	cmp	r3, r2
 8004dea:	bfb8      	it	lt
 8004dec:	4613      	movlt	r3, r2
 8004dee:	6033      	str	r3, [r6, #0]
 8004df0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004df4:	4607      	mov	r7, r0
 8004df6:	460c      	mov	r4, r1
 8004df8:	b10a      	cbz	r2, 8004dfe <_printf_common+0x26>
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	6033      	str	r3, [r6, #0]
 8004dfe:	6823      	ldr	r3, [r4, #0]
 8004e00:	0699      	lsls	r1, r3, #26
 8004e02:	bf42      	ittt	mi
 8004e04:	6833      	ldrmi	r3, [r6, #0]
 8004e06:	3302      	addmi	r3, #2
 8004e08:	6033      	strmi	r3, [r6, #0]
 8004e0a:	6825      	ldr	r5, [r4, #0]
 8004e0c:	f015 0506 	ands.w	r5, r5, #6
 8004e10:	d106      	bne.n	8004e20 <_printf_common+0x48>
 8004e12:	f104 0a19 	add.w	sl, r4, #25
 8004e16:	68e3      	ldr	r3, [r4, #12]
 8004e18:	6832      	ldr	r2, [r6, #0]
 8004e1a:	1a9b      	subs	r3, r3, r2
 8004e1c:	42ab      	cmp	r3, r5
 8004e1e:	dc26      	bgt.n	8004e6e <_printf_common+0x96>
 8004e20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e24:	1e13      	subs	r3, r2, #0
 8004e26:	6822      	ldr	r2, [r4, #0]
 8004e28:	bf18      	it	ne
 8004e2a:	2301      	movne	r3, #1
 8004e2c:	0692      	lsls	r2, r2, #26
 8004e2e:	d42b      	bmi.n	8004e88 <_printf_common+0xb0>
 8004e30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e34:	4649      	mov	r1, r9
 8004e36:	4638      	mov	r0, r7
 8004e38:	47c0      	blx	r8
 8004e3a:	3001      	adds	r0, #1
 8004e3c:	d01e      	beq.n	8004e7c <_printf_common+0xa4>
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	6922      	ldr	r2, [r4, #16]
 8004e42:	f003 0306 	and.w	r3, r3, #6
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	bf02      	ittt	eq
 8004e4a:	68e5      	ldreq	r5, [r4, #12]
 8004e4c:	6833      	ldreq	r3, [r6, #0]
 8004e4e:	1aed      	subeq	r5, r5, r3
 8004e50:	68a3      	ldr	r3, [r4, #8]
 8004e52:	bf0c      	ite	eq
 8004e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e58:	2500      	movne	r5, #0
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	bfc4      	itt	gt
 8004e5e:	1a9b      	subgt	r3, r3, r2
 8004e60:	18ed      	addgt	r5, r5, r3
 8004e62:	2600      	movs	r6, #0
 8004e64:	341a      	adds	r4, #26
 8004e66:	42b5      	cmp	r5, r6
 8004e68:	d11a      	bne.n	8004ea0 <_printf_common+0xc8>
 8004e6a:	2000      	movs	r0, #0
 8004e6c:	e008      	b.n	8004e80 <_printf_common+0xa8>
 8004e6e:	2301      	movs	r3, #1
 8004e70:	4652      	mov	r2, sl
 8004e72:	4649      	mov	r1, r9
 8004e74:	4638      	mov	r0, r7
 8004e76:	47c0      	blx	r8
 8004e78:	3001      	adds	r0, #1
 8004e7a:	d103      	bne.n	8004e84 <_printf_common+0xac>
 8004e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e84:	3501      	adds	r5, #1
 8004e86:	e7c6      	b.n	8004e16 <_printf_common+0x3e>
 8004e88:	18e1      	adds	r1, r4, r3
 8004e8a:	1c5a      	adds	r2, r3, #1
 8004e8c:	2030      	movs	r0, #48	; 0x30
 8004e8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e92:	4422      	add	r2, r4
 8004e94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e9c:	3302      	adds	r3, #2
 8004e9e:	e7c7      	b.n	8004e30 <_printf_common+0x58>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	4622      	mov	r2, r4
 8004ea4:	4649      	mov	r1, r9
 8004ea6:	4638      	mov	r0, r7
 8004ea8:	47c0      	blx	r8
 8004eaa:	3001      	adds	r0, #1
 8004eac:	d0e6      	beq.n	8004e7c <_printf_common+0xa4>
 8004eae:	3601      	adds	r6, #1
 8004eb0:	e7d9      	b.n	8004e66 <_printf_common+0x8e>
	...

08004eb4 <_printf_i>:
 8004eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb8:	7e0f      	ldrb	r7, [r1, #24]
 8004eba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ebc:	2f78      	cmp	r7, #120	; 0x78
 8004ebe:	4691      	mov	r9, r2
 8004ec0:	4680      	mov	r8, r0
 8004ec2:	460c      	mov	r4, r1
 8004ec4:	469a      	mov	sl, r3
 8004ec6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004eca:	d807      	bhi.n	8004edc <_printf_i+0x28>
 8004ecc:	2f62      	cmp	r7, #98	; 0x62
 8004ece:	d80a      	bhi.n	8004ee6 <_printf_i+0x32>
 8004ed0:	2f00      	cmp	r7, #0
 8004ed2:	f000 80d4 	beq.w	800507e <_printf_i+0x1ca>
 8004ed6:	2f58      	cmp	r7, #88	; 0x58
 8004ed8:	f000 80c0 	beq.w	800505c <_printf_i+0x1a8>
 8004edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ee0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ee4:	e03a      	b.n	8004f5c <_printf_i+0xa8>
 8004ee6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004eea:	2b15      	cmp	r3, #21
 8004eec:	d8f6      	bhi.n	8004edc <_printf_i+0x28>
 8004eee:	a101      	add	r1, pc, #4	; (adr r1, 8004ef4 <_printf_i+0x40>)
 8004ef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ef4:	08004f4d 	.word	0x08004f4d
 8004ef8:	08004f61 	.word	0x08004f61
 8004efc:	08004edd 	.word	0x08004edd
 8004f00:	08004edd 	.word	0x08004edd
 8004f04:	08004edd 	.word	0x08004edd
 8004f08:	08004edd 	.word	0x08004edd
 8004f0c:	08004f61 	.word	0x08004f61
 8004f10:	08004edd 	.word	0x08004edd
 8004f14:	08004edd 	.word	0x08004edd
 8004f18:	08004edd 	.word	0x08004edd
 8004f1c:	08004edd 	.word	0x08004edd
 8004f20:	08005065 	.word	0x08005065
 8004f24:	08004f8d 	.word	0x08004f8d
 8004f28:	0800501f 	.word	0x0800501f
 8004f2c:	08004edd 	.word	0x08004edd
 8004f30:	08004edd 	.word	0x08004edd
 8004f34:	08005087 	.word	0x08005087
 8004f38:	08004edd 	.word	0x08004edd
 8004f3c:	08004f8d 	.word	0x08004f8d
 8004f40:	08004edd 	.word	0x08004edd
 8004f44:	08004edd 	.word	0x08004edd
 8004f48:	08005027 	.word	0x08005027
 8004f4c:	682b      	ldr	r3, [r5, #0]
 8004f4e:	1d1a      	adds	r2, r3, #4
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	602a      	str	r2, [r5, #0]
 8004f54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e09f      	b.n	80050a0 <_printf_i+0x1ec>
 8004f60:	6820      	ldr	r0, [r4, #0]
 8004f62:	682b      	ldr	r3, [r5, #0]
 8004f64:	0607      	lsls	r7, r0, #24
 8004f66:	f103 0104 	add.w	r1, r3, #4
 8004f6a:	6029      	str	r1, [r5, #0]
 8004f6c:	d501      	bpl.n	8004f72 <_printf_i+0xbe>
 8004f6e:	681e      	ldr	r6, [r3, #0]
 8004f70:	e003      	b.n	8004f7a <_printf_i+0xc6>
 8004f72:	0646      	lsls	r6, r0, #25
 8004f74:	d5fb      	bpl.n	8004f6e <_printf_i+0xba>
 8004f76:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004f7a:	2e00      	cmp	r6, #0
 8004f7c:	da03      	bge.n	8004f86 <_printf_i+0xd2>
 8004f7e:	232d      	movs	r3, #45	; 0x2d
 8004f80:	4276      	negs	r6, r6
 8004f82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f86:	485a      	ldr	r0, [pc, #360]	; (80050f0 <_printf_i+0x23c>)
 8004f88:	230a      	movs	r3, #10
 8004f8a:	e012      	b.n	8004fb2 <_printf_i+0xfe>
 8004f8c:	682b      	ldr	r3, [r5, #0]
 8004f8e:	6820      	ldr	r0, [r4, #0]
 8004f90:	1d19      	adds	r1, r3, #4
 8004f92:	6029      	str	r1, [r5, #0]
 8004f94:	0605      	lsls	r5, r0, #24
 8004f96:	d501      	bpl.n	8004f9c <_printf_i+0xe8>
 8004f98:	681e      	ldr	r6, [r3, #0]
 8004f9a:	e002      	b.n	8004fa2 <_printf_i+0xee>
 8004f9c:	0641      	lsls	r1, r0, #25
 8004f9e:	d5fb      	bpl.n	8004f98 <_printf_i+0xe4>
 8004fa0:	881e      	ldrh	r6, [r3, #0]
 8004fa2:	4853      	ldr	r0, [pc, #332]	; (80050f0 <_printf_i+0x23c>)
 8004fa4:	2f6f      	cmp	r7, #111	; 0x6f
 8004fa6:	bf0c      	ite	eq
 8004fa8:	2308      	moveq	r3, #8
 8004faa:	230a      	movne	r3, #10
 8004fac:	2100      	movs	r1, #0
 8004fae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fb2:	6865      	ldr	r5, [r4, #4]
 8004fb4:	60a5      	str	r5, [r4, #8]
 8004fb6:	2d00      	cmp	r5, #0
 8004fb8:	bfa2      	ittt	ge
 8004fba:	6821      	ldrge	r1, [r4, #0]
 8004fbc:	f021 0104 	bicge.w	r1, r1, #4
 8004fc0:	6021      	strge	r1, [r4, #0]
 8004fc2:	b90e      	cbnz	r6, 8004fc8 <_printf_i+0x114>
 8004fc4:	2d00      	cmp	r5, #0
 8004fc6:	d04b      	beq.n	8005060 <_printf_i+0x1ac>
 8004fc8:	4615      	mov	r5, r2
 8004fca:	fbb6 f1f3 	udiv	r1, r6, r3
 8004fce:	fb03 6711 	mls	r7, r3, r1, r6
 8004fd2:	5dc7      	ldrb	r7, [r0, r7]
 8004fd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004fd8:	4637      	mov	r7, r6
 8004fda:	42bb      	cmp	r3, r7
 8004fdc:	460e      	mov	r6, r1
 8004fde:	d9f4      	bls.n	8004fca <_printf_i+0x116>
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	d10b      	bne.n	8004ffc <_printf_i+0x148>
 8004fe4:	6823      	ldr	r3, [r4, #0]
 8004fe6:	07de      	lsls	r6, r3, #31
 8004fe8:	d508      	bpl.n	8004ffc <_printf_i+0x148>
 8004fea:	6923      	ldr	r3, [r4, #16]
 8004fec:	6861      	ldr	r1, [r4, #4]
 8004fee:	4299      	cmp	r1, r3
 8004ff0:	bfde      	ittt	le
 8004ff2:	2330      	movle	r3, #48	; 0x30
 8004ff4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ff8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ffc:	1b52      	subs	r2, r2, r5
 8004ffe:	6122      	str	r2, [r4, #16]
 8005000:	f8cd a000 	str.w	sl, [sp]
 8005004:	464b      	mov	r3, r9
 8005006:	aa03      	add	r2, sp, #12
 8005008:	4621      	mov	r1, r4
 800500a:	4640      	mov	r0, r8
 800500c:	f7ff fee4 	bl	8004dd8 <_printf_common>
 8005010:	3001      	adds	r0, #1
 8005012:	d14a      	bne.n	80050aa <_printf_i+0x1f6>
 8005014:	f04f 30ff 	mov.w	r0, #4294967295
 8005018:	b004      	add	sp, #16
 800501a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800501e:	6823      	ldr	r3, [r4, #0]
 8005020:	f043 0320 	orr.w	r3, r3, #32
 8005024:	6023      	str	r3, [r4, #0]
 8005026:	4833      	ldr	r0, [pc, #204]	; (80050f4 <_printf_i+0x240>)
 8005028:	2778      	movs	r7, #120	; 0x78
 800502a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800502e:	6823      	ldr	r3, [r4, #0]
 8005030:	6829      	ldr	r1, [r5, #0]
 8005032:	061f      	lsls	r7, r3, #24
 8005034:	f851 6b04 	ldr.w	r6, [r1], #4
 8005038:	d402      	bmi.n	8005040 <_printf_i+0x18c>
 800503a:	065f      	lsls	r7, r3, #25
 800503c:	bf48      	it	mi
 800503e:	b2b6      	uxthmi	r6, r6
 8005040:	07df      	lsls	r7, r3, #31
 8005042:	bf48      	it	mi
 8005044:	f043 0320 	orrmi.w	r3, r3, #32
 8005048:	6029      	str	r1, [r5, #0]
 800504a:	bf48      	it	mi
 800504c:	6023      	strmi	r3, [r4, #0]
 800504e:	b91e      	cbnz	r6, 8005058 <_printf_i+0x1a4>
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	f023 0320 	bic.w	r3, r3, #32
 8005056:	6023      	str	r3, [r4, #0]
 8005058:	2310      	movs	r3, #16
 800505a:	e7a7      	b.n	8004fac <_printf_i+0xf8>
 800505c:	4824      	ldr	r0, [pc, #144]	; (80050f0 <_printf_i+0x23c>)
 800505e:	e7e4      	b.n	800502a <_printf_i+0x176>
 8005060:	4615      	mov	r5, r2
 8005062:	e7bd      	b.n	8004fe0 <_printf_i+0x12c>
 8005064:	682b      	ldr	r3, [r5, #0]
 8005066:	6826      	ldr	r6, [r4, #0]
 8005068:	6961      	ldr	r1, [r4, #20]
 800506a:	1d18      	adds	r0, r3, #4
 800506c:	6028      	str	r0, [r5, #0]
 800506e:	0635      	lsls	r5, r6, #24
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	d501      	bpl.n	8005078 <_printf_i+0x1c4>
 8005074:	6019      	str	r1, [r3, #0]
 8005076:	e002      	b.n	800507e <_printf_i+0x1ca>
 8005078:	0670      	lsls	r0, r6, #25
 800507a:	d5fb      	bpl.n	8005074 <_printf_i+0x1c0>
 800507c:	8019      	strh	r1, [r3, #0]
 800507e:	2300      	movs	r3, #0
 8005080:	6123      	str	r3, [r4, #16]
 8005082:	4615      	mov	r5, r2
 8005084:	e7bc      	b.n	8005000 <_printf_i+0x14c>
 8005086:	682b      	ldr	r3, [r5, #0]
 8005088:	1d1a      	adds	r2, r3, #4
 800508a:	602a      	str	r2, [r5, #0]
 800508c:	681d      	ldr	r5, [r3, #0]
 800508e:	6862      	ldr	r2, [r4, #4]
 8005090:	2100      	movs	r1, #0
 8005092:	4628      	mov	r0, r5
 8005094:	f7fb f8b4 	bl	8000200 <memchr>
 8005098:	b108      	cbz	r0, 800509e <_printf_i+0x1ea>
 800509a:	1b40      	subs	r0, r0, r5
 800509c:	6060      	str	r0, [r4, #4]
 800509e:	6863      	ldr	r3, [r4, #4]
 80050a0:	6123      	str	r3, [r4, #16]
 80050a2:	2300      	movs	r3, #0
 80050a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050a8:	e7aa      	b.n	8005000 <_printf_i+0x14c>
 80050aa:	6923      	ldr	r3, [r4, #16]
 80050ac:	462a      	mov	r2, r5
 80050ae:	4649      	mov	r1, r9
 80050b0:	4640      	mov	r0, r8
 80050b2:	47d0      	blx	sl
 80050b4:	3001      	adds	r0, #1
 80050b6:	d0ad      	beq.n	8005014 <_printf_i+0x160>
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	079b      	lsls	r3, r3, #30
 80050bc:	d413      	bmi.n	80050e6 <_printf_i+0x232>
 80050be:	68e0      	ldr	r0, [r4, #12]
 80050c0:	9b03      	ldr	r3, [sp, #12]
 80050c2:	4298      	cmp	r0, r3
 80050c4:	bfb8      	it	lt
 80050c6:	4618      	movlt	r0, r3
 80050c8:	e7a6      	b.n	8005018 <_printf_i+0x164>
 80050ca:	2301      	movs	r3, #1
 80050cc:	4632      	mov	r2, r6
 80050ce:	4649      	mov	r1, r9
 80050d0:	4640      	mov	r0, r8
 80050d2:	47d0      	blx	sl
 80050d4:	3001      	adds	r0, #1
 80050d6:	d09d      	beq.n	8005014 <_printf_i+0x160>
 80050d8:	3501      	adds	r5, #1
 80050da:	68e3      	ldr	r3, [r4, #12]
 80050dc:	9903      	ldr	r1, [sp, #12]
 80050de:	1a5b      	subs	r3, r3, r1
 80050e0:	42ab      	cmp	r3, r5
 80050e2:	dcf2      	bgt.n	80050ca <_printf_i+0x216>
 80050e4:	e7eb      	b.n	80050be <_printf_i+0x20a>
 80050e6:	2500      	movs	r5, #0
 80050e8:	f104 0619 	add.w	r6, r4, #25
 80050ec:	e7f5      	b.n	80050da <_printf_i+0x226>
 80050ee:	bf00      	nop
 80050f0:	08005631 	.word	0x08005631
 80050f4:	08005642 	.word	0x08005642

080050f8 <memmove>:
 80050f8:	4288      	cmp	r0, r1
 80050fa:	b510      	push	{r4, lr}
 80050fc:	eb01 0402 	add.w	r4, r1, r2
 8005100:	d902      	bls.n	8005108 <memmove+0x10>
 8005102:	4284      	cmp	r4, r0
 8005104:	4623      	mov	r3, r4
 8005106:	d807      	bhi.n	8005118 <memmove+0x20>
 8005108:	1e43      	subs	r3, r0, #1
 800510a:	42a1      	cmp	r1, r4
 800510c:	d008      	beq.n	8005120 <memmove+0x28>
 800510e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005112:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005116:	e7f8      	b.n	800510a <memmove+0x12>
 8005118:	4402      	add	r2, r0
 800511a:	4601      	mov	r1, r0
 800511c:	428a      	cmp	r2, r1
 800511e:	d100      	bne.n	8005122 <memmove+0x2a>
 8005120:	bd10      	pop	{r4, pc}
 8005122:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005126:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800512a:	e7f7      	b.n	800511c <memmove+0x24>

0800512c <_sbrk_r>:
 800512c:	b538      	push	{r3, r4, r5, lr}
 800512e:	4d06      	ldr	r5, [pc, #24]	; (8005148 <_sbrk_r+0x1c>)
 8005130:	2300      	movs	r3, #0
 8005132:	4604      	mov	r4, r0
 8005134:	4608      	mov	r0, r1
 8005136:	602b      	str	r3, [r5, #0]
 8005138:	f7fc fc40 	bl	80019bc <_sbrk>
 800513c:	1c43      	adds	r3, r0, #1
 800513e:	d102      	bne.n	8005146 <_sbrk_r+0x1a>
 8005140:	682b      	ldr	r3, [r5, #0]
 8005142:	b103      	cbz	r3, 8005146 <_sbrk_r+0x1a>
 8005144:	6023      	str	r3, [r4, #0]
 8005146:	bd38      	pop	{r3, r4, r5, pc}
 8005148:	20000980 	.word	0x20000980

0800514c <memcpy>:
 800514c:	440a      	add	r2, r1
 800514e:	4291      	cmp	r1, r2
 8005150:	f100 33ff 	add.w	r3, r0, #4294967295
 8005154:	d100      	bne.n	8005158 <memcpy+0xc>
 8005156:	4770      	bx	lr
 8005158:	b510      	push	{r4, lr}
 800515a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800515e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005162:	4291      	cmp	r1, r2
 8005164:	d1f9      	bne.n	800515a <memcpy+0xe>
 8005166:	bd10      	pop	{r4, pc}

08005168 <_realloc_r>:
 8005168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800516c:	4680      	mov	r8, r0
 800516e:	4614      	mov	r4, r2
 8005170:	460e      	mov	r6, r1
 8005172:	b921      	cbnz	r1, 800517e <_realloc_r+0x16>
 8005174:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005178:	4611      	mov	r1, r2
 800517a:	f7ff bc49 	b.w	8004a10 <_malloc_r>
 800517e:	b92a      	cbnz	r2, 800518c <_realloc_r+0x24>
 8005180:	f7ff fbda 	bl	8004938 <_free_r>
 8005184:	4625      	mov	r5, r4
 8005186:	4628      	mov	r0, r5
 8005188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800518c:	f000 f81b 	bl	80051c6 <_malloc_usable_size_r>
 8005190:	4284      	cmp	r4, r0
 8005192:	4607      	mov	r7, r0
 8005194:	d802      	bhi.n	800519c <_realloc_r+0x34>
 8005196:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800519a:	d812      	bhi.n	80051c2 <_realloc_r+0x5a>
 800519c:	4621      	mov	r1, r4
 800519e:	4640      	mov	r0, r8
 80051a0:	f7ff fc36 	bl	8004a10 <_malloc_r>
 80051a4:	4605      	mov	r5, r0
 80051a6:	2800      	cmp	r0, #0
 80051a8:	d0ed      	beq.n	8005186 <_realloc_r+0x1e>
 80051aa:	42bc      	cmp	r4, r7
 80051ac:	4622      	mov	r2, r4
 80051ae:	4631      	mov	r1, r6
 80051b0:	bf28      	it	cs
 80051b2:	463a      	movcs	r2, r7
 80051b4:	f7ff ffca 	bl	800514c <memcpy>
 80051b8:	4631      	mov	r1, r6
 80051ba:	4640      	mov	r0, r8
 80051bc:	f7ff fbbc 	bl	8004938 <_free_r>
 80051c0:	e7e1      	b.n	8005186 <_realloc_r+0x1e>
 80051c2:	4635      	mov	r5, r6
 80051c4:	e7df      	b.n	8005186 <_realloc_r+0x1e>

080051c6 <_malloc_usable_size_r>:
 80051c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051ca:	1f18      	subs	r0, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	bfbc      	itt	lt
 80051d0:	580b      	ldrlt	r3, [r1, r0]
 80051d2:	18c0      	addlt	r0, r0, r3
 80051d4:	4770      	bx	lr
	...

080051d8 <log>:
 80051d8:	b538      	push	{r3, r4, r5, lr}
 80051da:	ed2d 8b02 	vpush	{d8}
 80051de:	ec55 4b10 	vmov	r4, r5, d0
 80051e2:	f000 f841 	bl	8005268 <__ieee754_log>
 80051e6:	4622      	mov	r2, r4
 80051e8:	462b      	mov	r3, r5
 80051ea:	4620      	mov	r0, r4
 80051ec:	4629      	mov	r1, r5
 80051ee:	eeb0 8a40 	vmov.f32	s16, s0
 80051f2:	eef0 8a60 	vmov.f32	s17, s1
 80051f6:	f7fb fca9 	bl	8000b4c <__aeabi_dcmpun>
 80051fa:	b998      	cbnz	r0, 8005224 <log+0x4c>
 80051fc:	2200      	movs	r2, #0
 80051fe:	2300      	movs	r3, #0
 8005200:	4620      	mov	r0, r4
 8005202:	4629      	mov	r1, r5
 8005204:	f7fb fc98 	bl	8000b38 <__aeabi_dcmpgt>
 8005208:	b960      	cbnz	r0, 8005224 <log+0x4c>
 800520a:	2200      	movs	r2, #0
 800520c:	2300      	movs	r3, #0
 800520e:	4620      	mov	r0, r4
 8005210:	4629      	mov	r1, r5
 8005212:	f7fb fc69 	bl	8000ae8 <__aeabi_dcmpeq>
 8005216:	b160      	cbz	r0, 8005232 <log+0x5a>
 8005218:	f7ff fb62 	bl	80048e0 <__errno>
 800521c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8005248 <log+0x70>
 8005220:	2322      	movs	r3, #34	; 0x22
 8005222:	6003      	str	r3, [r0, #0]
 8005224:	eeb0 0a48 	vmov.f32	s0, s16
 8005228:	eef0 0a68 	vmov.f32	s1, s17
 800522c:	ecbd 8b02 	vpop	{d8}
 8005230:	bd38      	pop	{r3, r4, r5, pc}
 8005232:	f7ff fb55 	bl	80048e0 <__errno>
 8005236:	ecbd 8b02 	vpop	{d8}
 800523a:	2321      	movs	r3, #33	; 0x21
 800523c:	6003      	str	r3, [r0, #0]
 800523e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005242:	4803      	ldr	r0, [pc, #12]	; (8005250 <log+0x78>)
 8005244:	f000 b808 	b.w	8005258 <nan>
 8005248:	00000000 	.word	0x00000000
 800524c:	fff00000 	.word	0xfff00000
 8005250:	08005625 	.word	0x08005625
 8005254:	00000000 	.word	0x00000000

08005258 <nan>:
 8005258:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005260 <nan+0x8>
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	00000000 	.word	0x00000000
 8005264:	7ff80000 	.word	0x7ff80000

08005268 <__ieee754_log>:
 8005268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800526c:	ec51 0b10 	vmov	r0, r1, d0
 8005270:	ed2d 8b04 	vpush	{d8-d9}
 8005274:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005278:	b083      	sub	sp, #12
 800527a:	460d      	mov	r5, r1
 800527c:	da29      	bge.n	80052d2 <__ieee754_log+0x6a>
 800527e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005282:	4303      	orrs	r3, r0
 8005284:	ee10 2a10 	vmov	r2, s0
 8005288:	d10c      	bne.n	80052a4 <__ieee754_log+0x3c>
 800528a:	49cf      	ldr	r1, [pc, #828]	; (80055c8 <__ieee754_log+0x360>)
 800528c:	2200      	movs	r2, #0
 800528e:	2300      	movs	r3, #0
 8005290:	2000      	movs	r0, #0
 8005292:	f7fb faeb 	bl	800086c <__aeabi_ddiv>
 8005296:	ec41 0b10 	vmov	d0, r0, r1
 800529a:	b003      	add	sp, #12
 800529c:	ecbd 8b04 	vpop	{d8-d9}
 80052a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052a4:	2900      	cmp	r1, #0
 80052a6:	da05      	bge.n	80052b4 <__ieee754_log+0x4c>
 80052a8:	460b      	mov	r3, r1
 80052aa:	f7fa fffd 	bl	80002a8 <__aeabi_dsub>
 80052ae:	2200      	movs	r2, #0
 80052b0:	2300      	movs	r3, #0
 80052b2:	e7ee      	b.n	8005292 <__ieee754_log+0x2a>
 80052b4:	4bc5      	ldr	r3, [pc, #788]	; (80055cc <__ieee754_log+0x364>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	f7fb f9ae 	bl	8000618 <__aeabi_dmul>
 80052bc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80052c0:	460d      	mov	r5, r1
 80052c2:	4ac3      	ldr	r2, [pc, #780]	; (80055d0 <__ieee754_log+0x368>)
 80052c4:	4295      	cmp	r5, r2
 80052c6:	dd06      	ble.n	80052d6 <__ieee754_log+0x6e>
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	f7fa ffee 	bl	80002ac <__adddf3>
 80052d0:	e7e1      	b.n	8005296 <__ieee754_log+0x2e>
 80052d2:	2300      	movs	r3, #0
 80052d4:	e7f5      	b.n	80052c2 <__ieee754_log+0x5a>
 80052d6:	152c      	asrs	r4, r5, #20
 80052d8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80052dc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80052e0:	441c      	add	r4, r3
 80052e2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80052e6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80052ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052ee:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80052f2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80052f6:	ea42 0105 	orr.w	r1, r2, r5
 80052fa:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80052fe:	2200      	movs	r2, #0
 8005300:	4bb4      	ldr	r3, [pc, #720]	; (80055d4 <__ieee754_log+0x36c>)
 8005302:	f7fa ffd1 	bl	80002a8 <__aeabi_dsub>
 8005306:	1cab      	adds	r3, r5, #2
 8005308:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800530c:	2b02      	cmp	r3, #2
 800530e:	4682      	mov	sl, r0
 8005310:	468b      	mov	fp, r1
 8005312:	f04f 0200 	mov.w	r2, #0
 8005316:	dc53      	bgt.n	80053c0 <__ieee754_log+0x158>
 8005318:	2300      	movs	r3, #0
 800531a:	f7fb fbe5 	bl	8000ae8 <__aeabi_dcmpeq>
 800531e:	b1d0      	cbz	r0, 8005356 <__ieee754_log+0xee>
 8005320:	2c00      	cmp	r4, #0
 8005322:	f000 8122 	beq.w	800556a <__ieee754_log+0x302>
 8005326:	4620      	mov	r0, r4
 8005328:	f7fb f90c 	bl	8000544 <__aeabi_i2d>
 800532c:	a390      	add	r3, pc, #576	; (adr r3, 8005570 <__ieee754_log+0x308>)
 800532e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005332:	4606      	mov	r6, r0
 8005334:	460f      	mov	r7, r1
 8005336:	f7fb f96f 	bl	8000618 <__aeabi_dmul>
 800533a:	a38f      	add	r3, pc, #572	; (adr r3, 8005578 <__ieee754_log+0x310>)
 800533c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005340:	4604      	mov	r4, r0
 8005342:	460d      	mov	r5, r1
 8005344:	4630      	mov	r0, r6
 8005346:	4639      	mov	r1, r7
 8005348:	f7fb f966 	bl	8000618 <__aeabi_dmul>
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	4620      	mov	r0, r4
 8005352:	4629      	mov	r1, r5
 8005354:	e7ba      	b.n	80052cc <__ieee754_log+0x64>
 8005356:	a38a      	add	r3, pc, #552	; (adr r3, 8005580 <__ieee754_log+0x318>)
 8005358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535c:	4650      	mov	r0, sl
 800535e:	4659      	mov	r1, fp
 8005360:	f7fb f95a 	bl	8000618 <__aeabi_dmul>
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	2000      	movs	r0, #0
 800536a:	499b      	ldr	r1, [pc, #620]	; (80055d8 <__ieee754_log+0x370>)
 800536c:	f7fa ff9c 	bl	80002a8 <__aeabi_dsub>
 8005370:	4652      	mov	r2, sl
 8005372:	4606      	mov	r6, r0
 8005374:	460f      	mov	r7, r1
 8005376:	465b      	mov	r3, fp
 8005378:	4650      	mov	r0, sl
 800537a:	4659      	mov	r1, fp
 800537c:	f7fb f94c 	bl	8000618 <__aeabi_dmul>
 8005380:	4602      	mov	r2, r0
 8005382:	460b      	mov	r3, r1
 8005384:	4630      	mov	r0, r6
 8005386:	4639      	mov	r1, r7
 8005388:	f7fb f946 	bl	8000618 <__aeabi_dmul>
 800538c:	4606      	mov	r6, r0
 800538e:	460f      	mov	r7, r1
 8005390:	b914      	cbnz	r4, 8005398 <__ieee754_log+0x130>
 8005392:	4632      	mov	r2, r6
 8005394:	463b      	mov	r3, r7
 8005396:	e0a2      	b.n	80054de <__ieee754_log+0x276>
 8005398:	4620      	mov	r0, r4
 800539a:	f7fb f8d3 	bl	8000544 <__aeabi_i2d>
 800539e:	a374      	add	r3, pc, #464	; (adr r3, 8005570 <__ieee754_log+0x308>)
 80053a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a4:	4680      	mov	r8, r0
 80053a6:	4689      	mov	r9, r1
 80053a8:	f7fb f936 	bl	8000618 <__aeabi_dmul>
 80053ac:	a372      	add	r3, pc, #456	; (adr r3, 8005578 <__ieee754_log+0x310>)
 80053ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b2:	4604      	mov	r4, r0
 80053b4:	460d      	mov	r5, r1
 80053b6:	4640      	mov	r0, r8
 80053b8:	4649      	mov	r1, r9
 80053ba:	f7fb f92d 	bl	8000618 <__aeabi_dmul>
 80053be:	e0a7      	b.n	8005510 <__ieee754_log+0x2a8>
 80053c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80053c4:	f7fa ff72 	bl	80002ac <__adddf3>
 80053c8:	4602      	mov	r2, r0
 80053ca:	460b      	mov	r3, r1
 80053cc:	4650      	mov	r0, sl
 80053ce:	4659      	mov	r1, fp
 80053d0:	f7fb fa4c 	bl	800086c <__aeabi_ddiv>
 80053d4:	ec41 0b18 	vmov	d8, r0, r1
 80053d8:	4620      	mov	r0, r4
 80053da:	f7fb f8b3 	bl	8000544 <__aeabi_i2d>
 80053de:	ec53 2b18 	vmov	r2, r3, d8
 80053e2:	ec41 0b19 	vmov	d9, r0, r1
 80053e6:	ec51 0b18 	vmov	r0, r1, d8
 80053ea:	f7fb f915 	bl	8000618 <__aeabi_dmul>
 80053ee:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80053f2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80053f6:	9301      	str	r3, [sp, #4]
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	4680      	mov	r8, r0
 80053fe:	4689      	mov	r9, r1
 8005400:	f7fb f90a 	bl	8000618 <__aeabi_dmul>
 8005404:	a360      	add	r3, pc, #384	; (adr r3, 8005588 <__ieee754_log+0x320>)
 8005406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540a:	4606      	mov	r6, r0
 800540c:	460f      	mov	r7, r1
 800540e:	f7fb f903 	bl	8000618 <__aeabi_dmul>
 8005412:	a35f      	add	r3, pc, #380	; (adr r3, 8005590 <__ieee754_log+0x328>)
 8005414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005418:	f7fa ff48 	bl	80002ac <__adddf3>
 800541c:	4632      	mov	r2, r6
 800541e:	463b      	mov	r3, r7
 8005420:	f7fb f8fa 	bl	8000618 <__aeabi_dmul>
 8005424:	a35c      	add	r3, pc, #368	; (adr r3, 8005598 <__ieee754_log+0x330>)
 8005426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542a:	f7fa ff3f 	bl	80002ac <__adddf3>
 800542e:	4632      	mov	r2, r6
 8005430:	463b      	mov	r3, r7
 8005432:	f7fb f8f1 	bl	8000618 <__aeabi_dmul>
 8005436:	a35a      	add	r3, pc, #360	; (adr r3, 80055a0 <__ieee754_log+0x338>)
 8005438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543c:	f7fa ff36 	bl	80002ac <__adddf3>
 8005440:	4642      	mov	r2, r8
 8005442:	464b      	mov	r3, r9
 8005444:	f7fb f8e8 	bl	8000618 <__aeabi_dmul>
 8005448:	a357      	add	r3, pc, #348	; (adr r3, 80055a8 <__ieee754_log+0x340>)
 800544a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544e:	4680      	mov	r8, r0
 8005450:	4689      	mov	r9, r1
 8005452:	4630      	mov	r0, r6
 8005454:	4639      	mov	r1, r7
 8005456:	f7fb f8df 	bl	8000618 <__aeabi_dmul>
 800545a:	a355      	add	r3, pc, #340	; (adr r3, 80055b0 <__ieee754_log+0x348>)
 800545c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005460:	f7fa ff24 	bl	80002ac <__adddf3>
 8005464:	4632      	mov	r2, r6
 8005466:	463b      	mov	r3, r7
 8005468:	f7fb f8d6 	bl	8000618 <__aeabi_dmul>
 800546c:	a352      	add	r3, pc, #328	; (adr r3, 80055b8 <__ieee754_log+0x350>)
 800546e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005472:	f7fa ff1b 	bl	80002ac <__adddf3>
 8005476:	4632      	mov	r2, r6
 8005478:	463b      	mov	r3, r7
 800547a:	f7fb f8cd 	bl	8000618 <__aeabi_dmul>
 800547e:	460b      	mov	r3, r1
 8005480:	4602      	mov	r2, r0
 8005482:	4649      	mov	r1, r9
 8005484:	4640      	mov	r0, r8
 8005486:	f7fa ff11 	bl	80002ac <__adddf3>
 800548a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800548e:	9b01      	ldr	r3, [sp, #4]
 8005490:	3551      	adds	r5, #81	; 0x51
 8005492:	431d      	orrs	r5, r3
 8005494:	2d00      	cmp	r5, #0
 8005496:	4680      	mov	r8, r0
 8005498:	4689      	mov	r9, r1
 800549a:	dd48      	ble.n	800552e <__ieee754_log+0x2c6>
 800549c:	4b4e      	ldr	r3, [pc, #312]	; (80055d8 <__ieee754_log+0x370>)
 800549e:	2200      	movs	r2, #0
 80054a0:	4650      	mov	r0, sl
 80054a2:	4659      	mov	r1, fp
 80054a4:	f7fb f8b8 	bl	8000618 <__aeabi_dmul>
 80054a8:	4652      	mov	r2, sl
 80054aa:	465b      	mov	r3, fp
 80054ac:	f7fb f8b4 	bl	8000618 <__aeabi_dmul>
 80054b0:	4602      	mov	r2, r0
 80054b2:	460b      	mov	r3, r1
 80054b4:	4606      	mov	r6, r0
 80054b6:	460f      	mov	r7, r1
 80054b8:	4640      	mov	r0, r8
 80054ba:	4649      	mov	r1, r9
 80054bc:	f7fa fef6 	bl	80002ac <__adddf3>
 80054c0:	ec53 2b18 	vmov	r2, r3, d8
 80054c4:	f7fb f8a8 	bl	8000618 <__aeabi_dmul>
 80054c8:	4680      	mov	r8, r0
 80054ca:	4689      	mov	r9, r1
 80054cc:	b964      	cbnz	r4, 80054e8 <__ieee754_log+0x280>
 80054ce:	4602      	mov	r2, r0
 80054d0:	460b      	mov	r3, r1
 80054d2:	4630      	mov	r0, r6
 80054d4:	4639      	mov	r1, r7
 80054d6:	f7fa fee7 	bl	80002a8 <__aeabi_dsub>
 80054da:	4602      	mov	r2, r0
 80054dc:	460b      	mov	r3, r1
 80054de:	4650      	mov	r0, sl
 80054e0:	4659      	mov	r1, fp
 80054e2:	f7fa fee1 	bl	80002a8 <__aeabi_dsub>
 80054e6:	e6d6      	b.n	8005296 <__ieee754_log+0x2e>
 80054e8:	a321      	add	r3, pc, #132	; (adr r3, 8005570 <__ieee754_log+0x308>)
 80054ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ee:	ec51 0b19 	vmov	r0, r1, d9
 80054f2:	f7fb f891 	bl	8000618 <__aeabi_dmul>
 80054f6:	a320      	add	r3, pc, #128	; (adr r3, 8005578 <__ieee754_log+0x310>)
 80054f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fc:	4604      	mov	r4, r0
 80054fe:	460d      	mov	r5, r1
 8005500:	ec51 0b19 	vmov	r0, r1, d9
 8005504:	f7fb f888 	bl	8000618 <__aeabi_dmul>
 8005508:	4642      	mov	r2, r8
 800550a:	464b      	mov	r3, r9
 800550c:	f7fa fece 	bl	80002ac <__adddf3>
 8005510:	4602      	mov	r2, r0
 8005512:	460b      	mov	r3, r1
 8005514:	4630      	mov	r0, r6
 8005516:	4639      	mov	r1, r7
 8005518:	f7fa fec6 	bl	80002a8 <__aeabi_dsub>
 800551c:	4652      	mov	r2, sl
 800551e:	465b      	mov	r3, fp
 8005520:	f7fa fec2 	bl	80002a8 <__aeabi_dsub>
 8005524:	4602      	mov	r2, r0
 8005526:	460b      	mov	r3, r1
 8005528:	4620      	mov	r0, r4
 800552a:	4629      	mov	r1, r5
 800552c:	e7d9      	b.n	80054e2 <__ieee754_log+0x27a>
 800552e:	4602      	mov	r2, r0
 8005530:	460b      	mov	r3, r1
 8005532:	4650      	mov	r0, sl
 8005534:	4659      	mov	r1, fp
 8005536:	f7fa feb7 	bl	80002a8 <__aeabi_dsub>
 800553a:	ec53 2b18 	vmov	r2, r3, d8
 800553e:	f7fb f86b 	bl	8000618 <__aeabi_dmul>
 8005542:	4606      	mov	r6, r0
 8005544:	460f      	mov	r7, r1
 8005546:	2c00      	cmp	r4, #0
 8005548:	f43f af23 	beq.w	8005392 <__ieee754_log+0x12a>
 800554c:	a308      	add	r3, pc, #32	; (adr r3, 8005570 <__ieee754_log+0x308>)
 800554e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005552:	ec51 0b19 	vmov	r0, r1, d9
 8005556:	f7fb f85f 	bl	8000618 <__aeabi_dmul>
 800555a:	a307      	add	r3, pc, #28	; (adr r3, 8005578 <__ieee754_log+0x310>)
 800555c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005560:	4604      	mov	r4, r0
 8005562:	460d      	mov	r5, r1
 8005564:	ec51 0b19 	vmov	r0, r1, d9
 8005568:	e727      	b.n	80053ba <__ieee754_log+0x152>
 800556a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80055c0 <__ieee754_log+0x358>
 800556e:	e694      	b.n	800529a <__ieee754_log+0x32>
 8005570:	fee00000 	.word	0xfee00000
 8005574:	3fe62e42 	.word	0x3fe62e42
 8005578:	35793c76 	.word	0x35793c76
 800557c:	3dea39ef 	.word	0x3dea39ef
 8005580:	55555555 	.word	0x55555555
 8005584:	3fd55555 	.word	0x3fd55555
 8005588:	df3e5244 	.word	0xdf3e5244
 800558c:	3fc2f112 	.word	0x3fc2f112
 8005590:	96cb03de 	.word	0x96cb03de
 8005594:	3fc74664 	.word	0x3fc74664
 8005598:	94229359 	.word	0x94229359
 800559c:	3fd24924 	.word	0x3fd24924
 80055a0:	55555593 	.word	0x55555593
 80055a4:	3fe55555 	.word	0x3fe55555
 80055a8:	d078c69f 	.word	0xd078c69f
 80055ac:	3fc39a09 	.word	0x3fc39a09
 80055b0:	1d8e78af 	.word	0x1d8e78af
 80055b4:	3fcc71c5 	.word	0x3fcc71c5
 80055b8:	9997fa04 	.word	0x9997fa04
 80055bc:	3fd99999 	.word	0x3fd99999
	...
 80055c8:	c3500000 	.word	0xc3500000
 80055cc:	43500000 	.word	0x43500000
 80055d0:	7fefffff 	.word	0x7fefffff
 80055d4:	3ff00000 	.word	0x3ff00000
 80055d8:	3fe00000 	.word	0x3fe00000

080055dc <_init>:
 80055dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055de:	bf00      	nop
 80055e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055e2:	bc08      	pop	{r3}
 80055e4:	469e      	mov	lr, r3
 80055e6:	4770      	bx	lr

080055e8 <_fini>:
 80055e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ea:	bf00      	nop
 80055ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ee:	bc08      	pop	{r3}
 80055f0:	469e      	mov	lr, r3
 80055f2:	4770      	bx	lr
